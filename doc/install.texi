
@node install
@section Installation and porting

@subsection Installation

@cindex installation
@cindex autoconf 
@cindex makefiles

Blitz++ uses @acronym{GNU} Autoconf, which handles rewriting Makefiles for various
platforms and compilers.  It has greatly simplified installation and
porting.  Many thanks for John W. Eaton and Brendan Kehoe for their help
with this.

To install blitz, unpack the @file{blitz-VERSION.tar.gz} file (it will
install into a subdirectory @file{blitz-VERSION}).  For example:

@example
[tveldhui@@n2001:~] 32: ls -l blitz*.gz
-rw-r--r--   1 tveldhui users      480953 Jun 23 15:20 blitz-0.5.tar.gz
[tveldhui@@n2001:~] 33: gunzip blitz-0.5.tar.gz 
[tveldhui@@n2001:~] 34: tar xvf blitz-0.5.tar
blitz-0.5/CHANGELOG
blitz-0.5/COPYING
blitz-0.5/INSTALL
blitz-0.5/Makefile.in
blitz-0.5/README
blitz-0.5/THANKS
  .
  .
@end example

Then go into the main blitz directory, and type:

@cindex configure script
@example
./configure --with-cxx=[compiler]
@end example

where [compiler] is one of @code{gcc}, @code{KCC}, @code{cray}, @code{aCC},
@code{DECcxx}, @code{pgCC}, @code{SGI32}, or @code{SGI64}.

If your compiler has been renamed (e.g. @code{eg++} for gcc instead of the
usual @code{g++}), you can use this syntax to specify the command name for
the compiler:

@example
./configure --with-cxx=gcc:eg++
@end example

You can also specify special command-line options for your compiler, using
this syntax:

@example
./configure --with-cxx="gcc:eg++ -ftemplate-depth-50"
@end example

If you are interested in benchmarking, you may want to use the option
@code{--with-blas=...} to specify the path where the blas library is found.

Once the configure script is done, you can do any of these things:

@table @code
@item make lib
Check the compiler and create @file{libblitz.a}

@item make check
Do the above plus build and check the testsuite

@item make all
Do the above plus build the examples and benchmarks.  This may take a
@strong{long} time.
@end table

Building the benchmark programs requires both a Fortran 77 and Fortran 90
compiler.

@subsection The Blitz++ directory tree

The main Blitz++ directory contains these subdirectories:

@table @code
@item blitz
Blitz++ headers and source files.

@item random
Random number generators

@item compiler
Blitz++ compiler tests.  The @file{bzconfig} script is used to test a
compiler for ISO/ANSI C++ compatability.  This script creates the
@file{blitz/config.h} header file, which may enable various kludges to
compensate for deficiencies of your compiler.

@item examples
Example programs

@item manual
Documentation in HTML and PostScript.

@item benchmarks
Benchmark programs

@item testsuite
Testsuite programs

@item src
Source code for @file{libblitz.a}

@item lib
Where @file{libblitz.a} lives.
@end table

@subsection Porting Blitz++
@cindex porting Blitz++

If you want to try porting Blitz++ to a new compiler or platform, I suggest
the following approach:

@itemize @bullet
@item  First check the Blitz++ web page to make sure you have the latest
snapshot, and that someone hasn't already ported blitz to your platform.

@item  Go into the compiler subdirectory and run the bzconfig script.  This
will exercise your compiler to see what language features it supports.  If
it doesn't have member templates and enum computations, just give up.

@item  Install autoconf (from e.g.@: @url{ftp://prep.ai.mit.edu/pub/gnu}) if
you don't have it already.

@item  Make a backup of @file{configure.in}, and edit configure.in to add
appropriate cases for your compiler.  Then invoke autoconf to generate the
configure script.  Then try configure with your new @code{--with-cxx=} option.
Repeat until it works.

@end itemize

