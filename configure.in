dnl Process this file with autoconf to produce a configure script.

AC_PREREQ(2.53)
AC_INIT
AC_CANONICAL_TARGET([])
AC_CONFIG_SRCDIR([blitz/blitz.h])
AM_INIT_AUTOMAKE(Blitz++,0.6)

# Avoid generating makefile rules to rebuild maintainer-only files by
# default.  Maintainers may override this default and generate these
# makefile rules using the `--enable-maintainer-mode' configure option.
AM_MAINTAINER_MODE

# Blitz++ configure utility, generated by autoconf.
#
# If you want to modify this file, make sure you are editing
# configure.in, and not configure.  

SHELL=${CONFIG_SHELL-/bin/sh}
AC_SUBST(SHELL)dnl

echo ""
echo "Configuring Blitz++ for $target"
echo ""

# Declare variables which we want substituted in the Makefile.in's

AC_SUBST(CXX_LIBS)
AC_SUBST(CXX_OPTIMIZE_FLAGS)
AC_SUBST(CXX_DEBUG_FLAGS)
AC_SUBST(CXXFFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(F77)
AC_SUBST(F90)
AC_SUBST(FFLAGS)
AC_SUBST(F77_OPTIMIZE_FLAGS)
AC_SUBST(F90_OPTIMIZE_FLAGS)
AC_SUBST(FORTLIBS)
AC_SUBST(BLASLIB)
AC_SUBST(AR)
AC_SUBST(AR_FLAGS)
AC_SUBST(RANLIB)
AC_SUBST(CXXF90FLAG)

# Set default values
AR_FLAGS="-cru"
LDFLAGS=

# Process command-line arguments for configure

know_compiler=0

AC_ARG_WITH(cxx,
  [  --with-cxx=COMPILER[:name-flags]     set options for COMPILER (KCC, SGI, FCC, cray, gcc, old-gcc, DECcxx, aCC, icc, pgCC, xlC)],
  [case "$withval" in
     KCC*)               # KAI C++  http://www.kai.com/
       echo "Configuring for KAI C++"
       bz_compiler=kcc
       case "$target" in
         *aix*)
           # When using KCC under AIX, enable long long type
           AC_BZ_SET_COMPILER($withval,"KCC","--restrict --longlong --strict_warnings")
         ;;
         *)
           AC_BZ_SET_COMPILER($withval,"KCC","--restrict --strict_warnings")
         ;;
       esac
       CXX_OPTIMIZE_FLAGS="+K3 -O3"
       CXX_DEBUG_FLAGS="-g +K0 -DBZ_DEBUG"
       AR="KCC"
       AR_FLAGS="-o"
     ;;
     SGI*)               # SGI C++  http://www.sgi.com
       echo "Configuring for SGI C++"
       bz_compiler=sgiCC
       AC_BZ_SET_COMPILER($withval,"CC","-LANG:std -LANG:restrict")
       CXX_OPTIMIZE_FLAGS="-O3"
       CXX_DEBUG_FLAGS="-g -DBZ_DEBUG"
       AR="CC"
       AR_FLAGS="-ar -o"
       RANLIB="ar ts"
     ;;
     FCC*)
       echo "Configuring for Fujitsu C++"
       bz_compiler=FCC
       AC_BZ_SET_COMPILER($withval,"FCC","")
       CXX_OPTIMIZE_FLAGS="-K fast"
       CXX_DEBUG_FLAGS="-g -DBZ_DEBUG"
     ;;
     DECcxx6.2)          # DEC C++  http://www.digital.com/
       echo "Configuring for DEC cxx 6.2"
       bz_compiler=cxx
       AC_BZ_SET_COMPILER($withval,"cxx","-DBZ_ENABLE_XOPEN_SOURCE -std strict_ansi")
       CXX_OPTIMIZE_FLAGS="-O4 -tune host"
       CXX_DEBUG_FLAGS="-g -msg_display_tag -DBZ_DEBUG"
       AR_FLAGS="-rv"
       RANLIB="ar ts"
     ;;
     DECcxx6.3)          # DEC C++  http://www.digital.com/
       echo "Configuring for DEC cxx 6.3"
       bz_compiler=cxx
       AC_BZ_SET_COMPILER($withval,"cxx","-DBZ_ENABLE_XOPEN_SOURCE -std strict_ansi -nopure_cname")
       CXX_OPTIMIZE_FLAGS="-O4 -tune host"
       CXX_DEBUG_FLAGS="-g -msg_display_tag -DBZ_DEBUG"
       AR_FLAGS="-rv"
       RANLIB="ar ts"
     ;;
     cray*)              # Cray C++
       echo "Configuring for Cray C++."
       bz_compiler=cray
       AC_BZ_SET_COMPILER($withval,"CC","-h instantiate=used")
       CXX_OPTIMIZE_FLAGS="-O3 -hpipeline3 -hunroll -haggress -hscalar2"
       CXX_DEBUG_FLAGS="-g -DBZ_DEBUG"
     ;;
     old-gcc*)               # gcc  http://gcc.gnu.org/
       echo "Configuring for gcc (wahoo!)"
       bz_compiler=gcc
       AC_BZ_SET_COMPILER($withval,"g++","-ftemplate-depth-30")
       CXX_OPTIMIZE_FLAGS="-O2 -funroll-loops -fstrict-aliasing -fno-gcse"
       CXX_DEBUG_FLAGS="-g -DBZ_DEBUG"
     ;;
     gcc*)               # gcc  http://gcc.gnu.org/
       echo "Configuring for gcc (wahoo!)"
       bz_compiler=gcc
       AC_BZ_SET_COMPILER($withval,"g++","")
       CXX_OPTIMIZE_FLAGS="-O2 -funroll-loops"
       CXX_DEBUG_FLAGS="-g -DBZ_DEBUG"
     ;;
     aCC)                # HP-UX compiler http://www.hp.com/go/c++
       echo "Configuring for aCC (HP-UX)"
       bz_compiler=aCC
       AC_BZ_SET_COMPILER($withval,"aCC","-AA")
       CXX_OPTIMIZE_FLAGS="-O"
       CXX_DEBUG_FLAGS="-g -DBZ_DEBUG"
     ;;
     icc)                # Intel C++ compiler   http://www.intel.com/
       echo "Configuring for Intel C++"
       bz_compiler=icc
       AC_BZ_SET_COMPILER($withval,"icc","")
       CXX_OPTIMIZE_FLAGS="-O2"
       CXX_DEBUG_FLAGS="-g -O0 -DBZ_DEBUG"
     ;;
     pgCC*)              # Portland group   http://www.pgroup.com/
       echo "Configuring for Portland Group C++"
       bz_compiler=pgCC
       AC_BZ_SET_COMPILER($withval,"pgCC","")
       CXX_OPTIMIZE_FLAGS="-O4 -Mnoframe -Mnodepchk -Minline=levels:25"
       CXX_DEBUG_FLAGS="-g -O0 -DBZ_DEBUG"
     ;;
     xlC*)              # IBM Visual Age C++   http://www.ibm.com/
       echo "Configuring for IBM Visual Age C++"
       bz_compiler=xlC
       AC_BZ_SET_COMPILER($withval,"xlC","-qrtti=all")
       CXX_OPTIMIZE_FLAGS="-O3 -qstrict -Q -qansialias -qhot"
       CXX_DEBUG_FLAGS="-g -DBZ_DEBUG"
     ;;
     *)
        AC_MSG_WARN([--with-cxx: invalid option $withval])
     ;;
   esac
   know_compiler=1 ])



if test $know_compiler -eq 0; then
cat << 'EOH'

This script only recognizes a small set of compilers and platforms so far.
You will have to rerun this script with one of these options:
  --with-cxx=KCC          KAI C++ (http://www.kai.com/)
  --with-cxx=SGI          SGI C++ 7.3 or better (http://www.sgi.com/)
  --with-cxx=gcc          gcc (version 3.1 and up) (http://gcc.gnu.org/)
  --with-cxx=old-gcc      old gcc version (http://gcc.gnu.org/)
  --with-cxx=cray         Cray C++ 3.0 or better (http://www.cray.com/)
  --with-cxx=DECcxx6.2    DEC cxx 6.2 (http://www.dec.com/)
  --with-cxx=DECcxx6.3    DEC cxx 6.3 or better (http://www.dec.com/)
  --with-cxx=aCC          HP-UX aCC 3.33 or better (http://www.hp.com/go/c++)
  --with-cxx=icc          Intel icc 5.0 or better (http://www.intel.com/)
  --with-cxx=pgCC         PGI pgCC 3.0 or better (http://www.pgroup.com/)
  --with-cxx=xlC          IBM xlC 5.0 or better (http://www.ibm.com/)

EOH
exit 1
fi

# Check if the script was called with --enable-64bit
# and if so modify the compilation flags.

bz_64bit=false
AC_ARG_ENABLE(64bit,
  [  --enable-64bit          enable 64-bit compilation flags],
  [if test "$enableval" = yes; then
     echo "64-bit compilation flags enabled"
     bz_64bit=true
   fi], [])

# Set platform-specific fortran compilers and optimization settings

case "$target" in
  *aix*)
    echo "AIX: assuming xlf and xlf90"
    F77="xlf"
    F77_OPTIMIZE_FLAGS="-O3 -qstrict -qhot"
    F90="xlf90 -qsuffix=f=f90"
    F90_OPTIMIZE_FLAGS="-O3 -qstrict -qhot"
    FORTLIBS="-lxlf90"
    if test "$bz_64bit" = true; then
      F77="xlf -q64"
      F90="xlf90 -q64 -qsuffix=f=f90"
      case "$CXX" in
        xlC)
          CXXFLAGS="-q64 $CXXFLAGS"
          AR_FLAGS="-cruX64"
        ;;
        KCC)
          CXXFLAGS="-q64 $CXXFLAGS"
          AR_FLAGS="-q64 $AR_FLAGS"
        ;;
        gcc)
          CXXFLAGS="-maix64 $CXXFLAGS"
        ;;
      esac
    fi
  ;;
  *irix*)
    echo "IRIX: assuming f77 and f90"
    F77=f77
    F77_OPTIMIZE_FLAGS="-O3"
    F90=f90
    F90_OPTIMIZE_FLAGS="-O3"
    FORTLIBS="-lfortran -lffio -lftn"
    CXXFFLAGS="-DBZ_FORTRAN_SYMBOLS_WITH_TRAILING_UNDERSCORES"
    case "$CXX" in
      KCC)
        # When using KAI C++ under IRIX, enable some backend optimizations
        CXX_OPTIMIZE_FLAGS="+K3 -O3 --COMPO_fe --output_restrict --backend -LANG:restrict=on -mips4"
      ;;
    esac
    if test "$bz_64bit" = true; then
      F77="f77 -64"
      F90="f90 -64"
      case "$CXX" in
        CC)
          CXXFLAGS="-64 $CXXFLAGS"
          LDFLAGS="-64 $LDFLAGS"
          AR_FLAGS="-64 $AR_FLAGS"
        ;;
        KCC)
          CXXFLAGS="-64 $CXXFLAGS"
          AR_FLAGS="-64 $AR_FLAGS"
        ;;
        gcc)
          CXXFLAGS="-mabi=64 $CXXFLAGS"
        ;;
      esac
    fi
  ;;
  *linux*)
    case "$CXX" in
      g++)
    		echo "Linux: assuming g++/g77"
        F77="g77 -fno-second-underscore"
        F77_OPTIMIZE_FLAGS="-O2 -funroll-loops"
        F90=""
        F90_OPTIMIZE_FLAGS=""
        CXXFFLAGS="-DBZ_FORTRAN_SYMBOLS_WITH_TRAILING_UNDERSCORES"
        FORTLIBS="-lg2c"
      ;;
      icc)
    		echo "Linux: assuming icc/icf"
        F77=ifc
        F77_OPTIMIZE_FLAGS="-w90 -O2"
        F90=ifc
        F90_OPTIMIZE_FLAGS="-O2"
        CXXFFLAGS="-DBZ_FORTRAN_SYMBOLS_WITH_TRAILING_UNDERSCORES"
# To fix to find automatically the correct -L for fortran 90 libs and libg2c
#        FORTLIBS="-L/opt/intel/compiler60/ia32/lib -lF90 -lCEPCF90 -lIEPCF90 -lintrins -L/usr/lib/gcc-lib/i386-redhat-linux/2.96 -lg2c"
        FORTLIBS="-lF90 -lCEPCF90 -lIEPCF90 -lintrins -lg2c"
      ;;
    esac
  ;;
  *solaris*)
    echo "Solaris: assuming f77 and f90"
    F77=f77
    F77_OPTIMIZE_FLAGS="-O3"
    F90=f90
    F90_OPTIMIZE_FLAGS="-O3"
  ;;
  *hp-hpux*)
    echo "HP-UX: assuming f70 and f90"
    F77=f90
    F77_OPTIMIZE_FLAGS="-O3"
    F90=f90
    F90_OPTIMIZE_FLAGS="-O3"
    FORTLIBS="-lc -lF90"
  ;;
  *osf*)
    echo "OSF: assuming f77 and f90"
    F77=f77
    F77_OPTIMIZE_FLAGS="-O4 -tune host"
    F90=f90
    F90_OPTIMIZE_FLAGS="-O4 -tune host"
    FORTLIBS="-lfor"
    CXXFFLAGS="-DBZ_FORTRAN_SYMBOLS_WITH_TRAILING_UNDERSCORES"
  ;;
  alpha-cray-unicos)
    echo "Cray T3D/E: Setting special optimization flags"
    F77=fort77
    F77_OPTIMIZE_FLAGS="-O aggress -O 3 -O unroll2 -O pipeline3"
    F90=f90
    F90_OPTIMIZE_FLAGS="-O 3 -O aggress -O unroll2 -O pipeline3"
    CXXFFLAGS="-DBZ_FORTRAN_SYMBOLS_CAPS"
    case "$CXX" in
      KCC)
        # When using KAI C++ on the T3E, need to enable a bunch of
        # backend optimizations
        CXX_OPTIMIZE_FLAGS="+K3 -O3 --backend -hpipeline3 --backend -hunroll \
--backend -haggress --backend -hscalar2"
      ;;
    esac
  ;;
  *)
    echo << EOF

Blitz++ has not been tuned for this platform.  You may have trouble
building fortran benchmarks, and performance may be unexciting.

EOF
  ;;
esac

if [test ! x"$F90" = x]; then
	CXXF90FLAG="-DFORTRAN_90"
fi
AM_CONDITIONAL(F90_COMPILER, [test ! x"$F90" = x])


# Check if the script was called with --enable-optimize or
# --enable-debug, and if so modify the compilation flags.

bz_optimize=false
AC_ARG_ENABLE(optimize,
  [  --enable-optimize       enable compiler optimization flags],
  [if test "$enableval" = yes; then
     echo "Optimization flags enabled"
     CXXFLAGS="$CXXFLAGS $CXX_OPTIMIZE_FLAGS"
   fi], [])

bz_debug=false
AC_ARG_ENABLE(debug,
  [  --enable-debug          enable compiler debug flags],
  [if test "$enableval" = yes; then
     echo "Debugging flags enabled"
     CXXFLAGS="$CXXFLAGS $CXX_DEBUG_FLAGS"
   fi], [])

echo ""

# Disable shared library building by default (use --enable-shared to enable)
AM_DISABLE_SHARED

# Libtool stuff check
AC_PROG_LIBTOOL

AC_LANG([C++])
AC_PROG_CXX

AC_CHECK_LIB(m, sin)

# See if there is a libblas.a which can be used for benchmark
# comparisons.
# blas = Basic Linear Algebra Subroutines

AC_ARG_WITH(blas,
  [  --with-blas=DIR         set the path for the blas library],
  BLASPATH=-L"$withval",
  BLASPATH="")

echo "Checking to see if there is a usable BLAS library kicking around.."
echo "  (If so, Blitz++ will use BLAS library to run benchmarks against "
echo "   if you build the benchmarks.  Blitz++ itself does NOT use BLAS.)"

LDFLAGSsave=$LDFLAGS
LDFLAGS="$BLASPATH $LDFLAGS"

AC_CHECK_LIB(blas, daxpy_,
   [ CXX_OPTIMIZE_FLAGS="$CXX_OPTIMIZE_FLAGS -DUSE_LIBBLAS"
     CXXFFLAGS="-DBZ_FORTRAN_SYMBOLS_WITH_TRAILING_UNDERSCORES"
     BLASLIB="$BLASPATH -lblas" ],[],[$FORTLIBS])

AC_CHECK_LIB(blas, daxpy,
   [ CXX_OPTIMIZE_FLAGS="$CXX_OPTIMIZE_FLAGS -DUSE_LIBBLAS"
     CXXFFLAGS=""
     BLASLIB="$BLASPATH -lblas" ],[],[$FORTLIBS])

AC_CHECK_LIB(blas, DAXPY, 
   [ CXX_OPTIMIZE_FLAGS="$CXX_OPTIMIZE_FLAGS -DUSE_LIBBLAS"
     CXXFFLAGS="-DBZ_FORTRAN_SYMBOLS_CAPS"
     BLASLIB="$BLASPATH -lblas" ],[],[$FORTLIBS])

AC_CHECK_LIB(blas, daxpy__,
   [ CXX_OPTIMIZE_FLAGS="$CXX_OPTIMIZE_FLAGS -DUSE_LIBBLAS"
     CXXFFLAGS="-DBZ_FORTRAN_SYMBOLS_WITH_DOUBLE_TRAILING_UNDERSCORES"
     BLASLIB="$FORTLIBS $BLASPATH -lblas" ],[],[$FORTLIBS])

LDFLAGS=$LDFLAGSsave

dnl This is where an integrated bzconfig will go eventually.
dnl For now, I'm happy to do it with the makefile.
dnl AC_MSG_CHECKING([C++ compiler ($CXX $CXXFLAGS $LDFLAGS) characteristics])
dnl AC_MSG_RESULT([])
dnl AC_CONFIG_HEADER(config.h)

# Create the lib subdirectory by hand, since it has no Makefile.in
if test ! -d lib ; then
  mkdir lib
else
  true
fi

echo ""
echo "CXX                = $CXX"
echo "CXXFLAGS           = $CXXFLAGS"
echo "CXX_OPTIMIZE_FLAGS = $CXX_OPTIMIZE_FLAGS"
echo "CXX_DEBUG_FLAGS    = $CXX_DEBUG_FLAGS"
echo "CXXFFLAGS          = $CXXFFLAGS"
echo "F77                = $F77"
echo "F77_OPTIMIZE_FLAGS = $F77_OPTIMIZE_FLAGS"
echo "F90                = $F90"
echo "F90_OPTIMIZE_FLAGS = $F90_OPTIMIZE_FLAGS"
echo "FORTLIBS           = $FORTLIBS"
echo "BLASLIB            = $BLASLIB"
echo ""

# Process the Makefile.in's
AC_CONFIG_FILES([
	Makefile 
	bin/Makefile
	blitz/Makefile
	blitz/array/Makefile
	blitz/generate/Makefile
	blitz/meta/Makefile
	random/Makefile
	compiler/Makefile
	src/Makefile 
	lib/Makefile
	manual/Makefile
	manual/examples/Makefile
	manual/stencils/Makefile
	testsuite/Makefile 
	examples/Makefile
	benchmarks/Makefile 
	benchmarks/plot_benchmarks.m
	doc/Makefile
	doc/examples/Makefile
	doc/stencils/Makefile
	])
#	demos/Makefile
AC_OUTPUT

# At some point in the future it would be nice to collect
# information about machines, OSes and compilers which
# people are using.  Obviously this has to be handled in
# a sensitive way.  Current idea: send the output
# of uname -a, $(target) and $(bz_compiler) via an
# anonymous remailer.  Prompt the user and give them
# a chance to override this behaviour.

if false; then

rm -f __target_id
echo "Subject: blitz machineinfo" >>__target_id
echo "" >>__target_id
echo "Target: " $target >>__target_id
echo "Compiler: " $bz_compiler >>__target_id
echo "Date: " `date` >>__target_id

echo " "
echo "****************"
echo "With your permission, this script will send a mail message"
echo "containing some information about your hardware, OS, and compiler."
echo "This message will be sent via an anonymous remailer, so all"
echo "identifying information about you and your organization will be"
echo "removed.  These mail messages allow the Blitz++ developers to"
echo "gauge how large the user base is, and what platforms are being"
echo "used.  The email message will look like this:"
echo " "
echo "TO: anonymous remailer"
cat __target_id

echo " "
echo "Is it okay if this message is sent? (yes/no)"
read cansendtarget

case "$cansendtarget" in
  y*)
     sendmail tveldhui@seurat.uwaterloo.ca <__target_id
     echo "Thanks.  The mail has been sent."
     touch .bz_surveyed
  ;;
  *)
     echo "No mail was sent."
  ;;
esac

rm -f __target_id

fi


cat << 'EOH'

The configure script has generated makefiles for your platform.
You have several options now:

	make lib              Check the compiler and create libblitz.a
	make check-testsuite  Build and check the testsuite
	make check-examples   Build and check the examples
	make check-benchmarks Build and check the benchmarks (takes a long time)
	make install          Install Blitz++

EOH
