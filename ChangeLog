2002-07-16  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* Makefile.am: Added line to specify subdirectories and insure
	that compiler subdirectory is visited before blitz subdirectory.
	This is necessary because the compiler subdirectory generates the
	config.h header file needed in blitz subdirectory.
	* Makefile.in: Rebuilt from Makefile.am.
	* configure: Rebuilt from configure.in.  Includes changes to IBM
	xlf90 flags.
	* aclocal.m4: Rebuilt using aclocal 1.6.2.
	* blitz/Makefile.am: Added config.h to blitz_HEADERS list and
	removed all the compiler-specific config files.  These
	compiler-specific files should no longer be needed because we
	normally generate the config.h file automatically.  Moved the
	compiler-specific headers to the EXTRA_DIST list so they will
	still be included in the distribution tarball.
	* blitz/Makefile.in: Rebuilt from Makefile.am.
	* blitz/array/funcs.h: Removed ET support for Array expressions
	involving ldexp(), jn() and yn() functions.  These functions
	require specialized macros that allow one of the function
	arguments to be an ordinary int.  Such macros have not yet been
	added to <blitz/funcs.h>.

2002-07-02  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* examples/cast.cpp: Added check for use of new-style expression
	templates.  I changed the syntax for casting the type of a blitz
	Array to make it simpler.  Instead of giving a second argument
	that is an instance of the new element type, just provide the new
	element type as a template parameter.
	* testsuite/newet.cpp: Added testing of functorExpr.h header file,
	which provides support for declaring user-defined functors and
	class methods that act on Array types.  The code for this support
	originated from Derrick Bass of Caltech.
	* testsuite/tinyvec.cpp: Include blitz/tinyvec-et.h here to get ET
	support.
	* blitz/vecexpr.h: Undid the previous change to this file.  Vector
	ET support is now gotten by including blitz/vector-et.h
	explicitly.
	* blitz/promote.h: Added BZ_BLITZ_SCOPE to promote_trait in
	BZ_PROMOTE macro definition so that this macro works correctly
	outside the blitz namespace.
	* blitz/Makefile.am: Removed Array.h, Vector.h, TinyVec.h and
	TinyMat.h from blitz_HEADERS.  Added array-old.h, vector-et.h
	tinyvec-et.h and funcs.h.
	* blitz/Makefile.in: Rebuilt from Makefile.am to update
	blitz_HEADERS.
	* blitz/array.h: This file used to be called Array.h but has been
	renamed to avoid name clashes on Windows-based systems.  This file
	includes only the Array class implementation files.
	* blitz/array/newet-macros.h: Renamed and reorganized new style
	macros for declaring unary and binary functions/operators that act
	on Array types.
	* blitz/array/newet.h: Added #include of blitz/array/functorExpr.h
	to support user-defined functors and class methods acting on Array
	types.
	* blitz/array/funcs.h: Use new style of Array ET macros to declare
	unary and binary math functions that act on Array types.
	* blitz/array/ops.h: Use new style of Array ET macros to create
	unary and binary operators that act on Array types.
	* blitz/ops.h: Rewrote and reorganized this file to make better
	use of macros to generate all the functor classes needed to
	provide unary and binary operators for the "new" style of
	expression templates.
	* blitz/array/Makefile.am: Added functorExpr.h to list of
	array_HEADERS.
	* blitz/array/Makefile.in: Rebuilt from Makefile.am to include new
	header file.

2002-06-28  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* blitz/mathfunc.h: Corrected categorization of fmod and ilogb
	math functions.
	* blitz/vecuops.cc: Freshly generated from genvecuops.cpp.
	Changed BZ_HAVE_SYSV_MATH to BZ_HAVE_SYSTEM_V_MATH to match what
	is in config.h and elsewhere.  Corrected categorization of a few
	math functions.  Otherwise, no changes.
	* blitz/matuops.h: Freshly generated matuops.h header file with
	definitions for unary math functions operating on Matrix types.
	This file was previously empty.  I followed a style similar to
	that of vecuops.
	* blitz/matbops.h: Rebuilt from latest genmatbops.cpp.  Same
	content as before with slightly different formatting.  Also,
	binary combinations with complex<T> are now handled with a single
	templated ComplexOperand type as with vecbops.
	* blitz/generate: Added support for generating matuops.h header
	file borrowing heavily from the existing genvecuops code.  Also
	made a few corrections in categorization of math functions.
	* configure.in: Added -qstrict flag to F77 and F90 optimization
	flags on AIX platforms to avoid optimizations that might alter the
	code semantics, as suggested by the compiler.  Added flag for
	xlf90 compiler to allow f90 file suffix.
	* config.guess: Undo previous change to this script regarding use
	of oslevel script on AIX.  This was a mistake based on an error in
	my environment variable settings.

2002-06-27  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* compiler/sysvmath.cpp: Removed ilogb() and fmod() from this
	test.  ilogb() is now in the IEEE math test and fmod() should be
	in the standard C math library.
	* compiler/ieeemath.cpp: Added tests for cbrt() and ilogb() here.
	* compiler/getruse.cpp: Added code to check if getrusage() is
	available.
	* blitz/benchext.cc: Changed loop variable j to unsigned to
	eliminate signed/unsigned comparisons.
	* testsuite/complex-test.cpp: Added some explicit casts to float
	to eliminate precision loss warnings from implicit conversions of
	double to float.  Changed abs() to fabs() for floating-point
	arguments.  abs() is for ints or complex numbers, while fabs() is
	for floating-point numbers.
	* testsuite/chris-jeffery-1.cpp: Slight change to eliminate
	precision loss warning from double/float conversion.
	* blitz/array/storage.h: Use _bz_bool and _bz_true where
	appropriate to avoid int/bool conversions.
	* blitz/array/fastiter.h: Changed order of ctor initializers to
	match order of member data declarations, eliminating warning from
	gcc compiler.
	* blitz/array/slicing.cc: Modified valid indexing check to avoid
	casting to unsigned.
	* blitz/shapecheck.h: Changed loop variable i to unsigned to avoid
	unsigned/signed comparisons.
	* blitz/array-impl.h: Modified the isInRange() methods to check
	that each index value is greater than or equal to the base index
	value, rather than just casting (index-base) to an unsigned int.
	The latter gives unpredictable results if index<base and produces
	compiler warnings about comparisons between unsigned and signed
	quantities.
	* blitz/tinyvec.h: Changed return type of lengthCheck() method
	from int to _bz_bool.
	* testsuite/extract.cpp: Undid previous change and went back to
	using static const int data members instead of enums for red,
	green and blue.  These have to be actual ints, or else the Array
	operator[] does not work properly.  Need to investigate further
	the link-time error that occurs with this test code when using
	xlC.

2002-06-26  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* configure: Rebuilt from configure.in.
	* configure.in: Moved package and version arguments back to
	AM_INIT_AUTOMAKE macro call.  The new style suggested in the
	automake documentation doesn't seem to work right when the tarball
	name contains uppercase letters and is not trivially derived from
	the package name.
	* configure.in: Added section to handle xlC as a valid C++
	compiler option.  Moved package name and version number arguments
	to AC_INIT macro.  Moved AC_CANONICAL_TARGET macro call higher up
	in file to eliminate autoconf warning.
	* config.guess: Commented out use of oslevel command on AIX
	platform to get OS version and release info, since it does not
	always seem to report the right thing and can send confusing
	output to config.sub.
	* examples/Makefile.in: Rebuilt from examples/Makefile.am.
	* examples/Makefile.am: Added profile.cpp, tiny2.cpp and tiny3.cpp
	to EXTRA_DIST, so that these files will be included in the
	distribution tarball.  This is necessary because these files are
	not include in SOURCES and are not normally compiled.
	* testsuite/extract.cpp: Changed members red, green and blue of
	class RGB24 from static const int's to enumerators in order to
	avoid a link-time error with xlC compiler.
	* blitz/tinyvec.h: Changed P_numtype to T_numtype inside class
	definition consistently.
	* blitz/array-impl.h: Changed template parameter name T_numtype2
	to P_numtype2 in member function template declarataions for
	consistency with definitions and to avoid any confusion with
	typedef T_numtype.
	* blitz/array/slicing.cc: Changed T_numtype to P_numtype when used
	outside the argument list or body of a member function definition
	(i.e., outside the class scope).  Inside the class scope, we can
	use the typedef T_numtype.  The IBM xlC compiler gets confused if
	P_numtype is used as a template parameter name in a member
	function declaration and then T_numtype is used as the parameter
	name in the member function definition.  Fixed usage to be more
	consistent.
	* blitz/array/methods.cc: Likewise.
	* blitz/array/ops.cc: Likewise.
	* blitz/tinyvec.cc: Likewise.
	* blitz/array/et.h: Added #include of blitz/array/misc.cc if not
	using new expression templates.
	* blitz/array-impl.h: Explicitly specify second template argument
	for ListInitializationSwitch, rather than relying on the default
	value.  This eliminates a compilation problem using the xlC
	compiler.  Also removed #include of misc.cc, which is now handled
	in blitz/array/et.h.
	* blitz/tinymat.h: Likewise.
	* blitz/tinyvec.h: Likewise.

2002-05-27  Julian Cummings  <cummings@tis-sa-ack.cacr.caltech.edu>
	* blitz/array-impl.h: Removed use of this-> as means of accessing
	members of templated base class.  Instead provided using
	declarations for these members within the derived class
	definitions to bring them into the scope of the derived class.
	* blitz/array/slicing.cc: Likewise.
	* blitz/array/eval.cc: Likewise.
	* blitz/array/methods.cc: Likewise.
	* blitz/array/storage.h: Likewise.
	* blitz/array/stencil-et.h: Likewise.
	* blitz/array/iter.h: Likewise.
	* blitz/matrix.cc: Likewise.
	* blitz/vector.cc: Likewise.
	* blitz/memblock.h: Likewise.
	* blitz/matrix.h: Likewise.
	* blitz/vector.h: Likewise.

Fri May 24 10:25:23 CEST 2002 Patrick Guio <patrick.guio@fys.uio.no>
	* INSTALL: added instruction for cvs repository installation in case a
	problem should occur with the build system.
	* configure.in: removed some unecessary check
	* configure: regenerated with autoconf 2.53, automake 1.6.1, libtool 1.4.2
	* every Makefile.in: likewise

Thu May 23 17:08:43 CEST 2002 Patrick Guio <patrick.guio@fys.uio.no>
	* configure.in: added support for ranlib on SGI that failed and a few
	other tests. The variable RANLIB is set to "ar ts" for SGI as well as for
	DECcxx.
	* blitz/Makefile.am: added tinymatio.cc in the blitz_HEADERS variable
	* configure: regenerated with autoconf 2.53, automake 1.6.1, libtool 1.4.2
	* every Makefile.in: likewise

2002-05-22  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* blitz/array/eval.cc: Fixed bug in
	Array::evaluateWithIndexTraversal1() by removing cast of second
	argument to T_numtype in call to T_update::update().  This cast
	will occur automatically when the update operation is performed.
	This fixes a problem reported by Masahiro Tatsumi
	<tatsumi@nfi.co.jp> in which one could not assign a double to an
	Array of TinyVectors of double without explicitly constructing a
	TinyVector of doubles on the right-hand side.  Also fixed an
	unused variable warning emanating from the function
	Array::evaluateWithFastTraversal() by moving the definition of
	local variable "last" so that it is only seen if it is used.
	* blitz/tinymatio.cc: new file (I/O operations for blitz TinyMatrix)
	* blitz/tinymat.h: added #include of <blitz/tinymatio.cc>

Fri May 10 16:25:14 CEST 2002 Patrick Guio <patrick.guio@fys.uio.no>
	* blitz/randref.h: private constructor for template class _bz_VecExprRandom
	did not had an explicit initialiser for the private member random_, added
	it. 
	Compaq C++ V6.5-014 for Compaq Tru64 UNIX V5.1A (Rev. 1885) complained
	about this.
	* blitz/array/map.h: likewise for template class ArrayIndexMapping

Wed May  8 15:24:29 CEST 2002 Patrick Guio <patrick.guio@fys.uio.no>
	* configure.in: regenerated by running the command autoupdate from 
	autoconf 2.53
	* configure: regenerated by running the command autoreconf --force --install 
	with autoconf 2.53, automake 1.6.1, libtool 1.4.2
	* COPYING: likewise
	* Makefile.in: likewise
	* benchmarks/Makefile.in: likewise
	* bin/Makefile.in: likewise
	* blitz/Makefile.in: likewise
	* blitz/array/Makefile.in: likewise
	* blitz/generate/Makefile.in: likewise
	* blitz/meta/Makefile.in: likewise
	* compiler/Makefile.in: likewise
	* examples/Makefile.in: likewise
	* lib/Makefile.in: likewise
	* manual/Makefile.in: likewise
	* manual/examples/Makefile.in: likewise
	* manual/stencils/Makefile.in: likewise
	* random/Makefile.in: likewise
	* src/Makefile.in: likewise
	* testsuite/Makefile.in: likewise
	* aclocal.m4: likewise
	* install-sh: likewise
	* missing: likewise
	* mkinstalldirs: likewise
	* depcomp: new file generated by running autoreconf --force --install
	with autoconf 2.53, automake 1.6.1, libtool 1.4.2
	* config.guess: imported from automake 1.6.1
	* config.sub: likewise
	* benchmarks/Makefile.am: removed target 'compile' that caused trouble when
	'make dist'
	* benchmarks/Makefile.in: regenerated with automake
	* examples/Makefile.am: removed targes 'compile' and 'all' that caused
	trouble when 'make dist'
	* examples/Makefile.in: regenerated with automake

Wed Apr 17 18:45:13 2002 Patrick Guio <patrick.guio@fys.uio.no>
	* blitz/array/stencil-et.h: replaced T_numtype with P_numtype in
	every macros definitions. Fixed a compilation problem with aCC/HP
	in the stencils examples (stencils2.cpp, stencil3.cpp, stencilet.cpp)
	in the directory examples. 
	Suggested by Robert W. Techentin <techentin.robert@mayo.edu>

Thu Mar 21 11:12:36 CET 2002 Patrick Guio <patrick.guio@fys.uio.no>
	* examples/io.cpp: added #ifdef BZ_HAVE_STD for #include <fstream>
	* examples/polymorph.cpp: corrected polymorph container declaration 
	Array<Material&,1> by Array<Material*,1>
	* examples/prettyprint.cpp: removed unecessary #include <iostream.h>
	* examples/rand2.cpp: likewise
	* examples/rand2.cpp: added return 0; to function int main2()
	* examples/tiny3.cpp: fixed typo #include <blitz/TinyMath.> into
	#include <blitz/TinyMat.h>
	* examples/Makefile.{am,in}: removed targets tiny2.cpp (no int main()), 
	tiny3.cpp (no int main()) and profile.cpp (requires tau profiling)
	* array/stencil-et.h: replaced iter_ by this->iter_ in derived template
	classes of StencilExpr template class

Thu Mar  7 09:06:58 CET 2002 Patrick Guio <patrick.guio@fys.uio.no>
	* configure.in: f90 optimisation flag set to O3 for platform *hp-hpux*
	* blitz/array/io.cc: cosmetic change
	* blitz/traversal.h: moved 
	template<int N_dimensions>
	_bz_typename TraversalOrderCollection<N_dimensions>::T_set
	    TraversalOrderCollection<N_dimensions>::traversals_;
	after the declaration of 
	template<int N_dimensions> class TraversalOrderCollection
	* TODO: new file
	* blitz/array/expr.h: 
	line 124 
	#ifdef BZ_NEW_EXPRESSION_TEMPLATES replaced by
	#if defined(BZ_NEW_EXPRESSION_TEMPLATES) && ! defined(__MWERKS__)
	line 134 added 
	#if !defined(__MWERKS__)
	#endif
	as suggested by Xavier Warin <xavier.warin@der.edfgdf.fr> 
	for Metrowerks code warrior compiler
	* random/mt.h: fixed use of STL iterator as suggested by 
	Julian Cummings <cummings@cacr.caltech.edu> and 
	Osamu Ogasawara <oogasawa@ims.u-tokyo.ac.jp>
	* blitz/config-mwerks.h: new file, configuration file for Metrowerks code
	warrior compiler proposed by Xavier Warin <xavier.warin@der.edfgdf.fr>
	* INSTALL: updated with the new make targets
	* Makefile.am (in each directory): fixed a bug for the target dist
	* configure.in: added support for Intel icf (Fortran 90 compiler) when 
	target is *linux* and CXX is Intel icc
	* benchmarks/Makefile: added work.pc* in clean target, these files are
	generated when running Intel Fortran 90 compiler ifc
	* benchmarks/plot_benchmarks.m.in: new file to generate m-file
	benchmarks/plot_benchmarks.m to plot benchmarks results
	* configure.in: added benchmarks/plot_benchmarks.m to be generated from
	benchmarks/plot_benchmarks.m.in
	* configure.in: output correctly the available DEC (actually now Compaq:-) 
	compilers
	* INSTALL: likewise

Wed Mar  6 11:41:32 CET 2002 Patrick Guio <patrick.guio@fys.uio.no>
	* ChangeLog: new file
	* testsuite/mattias-lindstroem-1: removed (executable)
	* configure.in: updated with autoupdate (GNU autoconf) 2.49c, added support
	for HP-UX aCC and Intel icc.
	* aclocal.m4: renamed to acinclude.m4. It contains the *_BZ_* declarations
	* acinclude.m4: new file generated by running aclocal (GNU automake) 1.4a
	* Makefile.am (in each directory): new files (to generate a Makefile.in with
	automake)
	* bin/Makefile.in, blitz/Makefile.in, blitz/array/Makefile.in,
	* blitz/generate/Makefile.in, blitz/meta/Makefile.in, lib/Makefile.in,
	* manual/Makefile.in, manual/examples/Makefile.in,
	* manual/stencils/Makefile.in, random/Makefile.in,: new files generated
	from Makefile.am generated by running automake (GNU automake) 1.4a
	* .cvsignore (in each directory): new files
	* missing: new file generated when running the script autoconf -a -c -i
	(GNU autoconf) 2.49c
	* mkinstalldirs: likewise
	* config.guess: updated from automake 1.4a
	* config.sub: likewise
	* GPL: renamed to COPYING according to GNU standard
	* AUTHORS, COPYING, NEWS: new files to follow the GNU standard
	* benchmarks/*f90.f: renamed to benchmarks/*f90.f90
	* examples/complex.cpp: renamed to examples/complex-test.cpp
	* testsuite/complex.cpp: renamed to testsuite/complex-test.cpp due to
	interference with #include<complex>
	* Makefile.in, aclocal.m4, configure, benchmarks/Makefile.in,
	bin/Makefile.in, blitz/Makefile.in, blitz/array/Makefile.in,
	blitz/generate/Makefile.in, blitz/meta/Makefile.in, compiler/Makefile.in,
	demos/Makefile.in, examples/Makefile.in, lib/Makefile.in,
	manual/Makefile.in, manual/examples/Makefile.in,
	manual/stencils/Makefile.in, random/Makefile.in, src/Makefile.in,
	testsuite/Makefile.in: regenerated files from Makefile.am generated by
	running automake (GNU automake) 1.4a
	* manual/examples/Makefile, manual/stencils/Makefile: removed, now generated
	by configure
	* CHANGELOG: renamed to ChangeLog.1
	* manual/examples/*.out: renamed to manual/examples/*.log due to
	interference with automake
	* compiler/elabbase.cpp: bar() replaced by this->bar() in zowee() const for
	ANSI C++ correctness (14.6.2(3) in the C++ Standard)
	* src/globals.cpp: char* _blitz_id replaced by char _blitz_id[]
	* random/uniform.h: irng_.random() replaced by this->irng_.random()
	everywhere for ANSI C++ correctness (14.6.2(3) in the C++ Standard)
	* random/discrete-uniform.h: likewise
	* random/normal.h: getUniform() replaced by this->getUniform() 
	* blitz/array-impl.h: 
	data_ replaced by this->data_ everywhere,
	changeToNullBlock() replaced by this->changeToNullBlock(),
	class _bz_endTag replaced by struct _bz_endTag { } declaration
	* blitz/array/resize.cc: for (d=0; d < N_rank; ++d) replaced by for (int
	d=0; d < N_rank; ++d) (for scoping)
	* blitz/array/iter.h: 
	data_ replaced by this->data_ in 
	template<class T, int N>
	class ArrayIterator : public ConstArrayIterator<T,N> {},
	removed struct _bz_endTag { }; declaration
	* blitz/array/io.cc: added typename (_bz_typename) qualifier to the
	iterator and const_iterator of Array<T_numtype,N_rank>
	* blitz/ops.h: os replaced by str in the BitwiseNot template
	* blitz/vector.h: data_ replaced by this->data_ everywhere
	* blitz/array/slicing.cc: likewise
	* blitz/array/eval.cc: likewise
	* blitz/array/methods.cc: data_ replaced by this->data_ everywhere
	numReferences() replaced by this->numReferences()
	* blitz/vector.cc: data_ replaced by this->data_ everywhere, 
	numReferences() by this->numReferences()
	* blitz/matrix.cc: data_ replaced by this->data_
	* blitz/matrix.h: likewise everywhere
	* blitz/promote.h: typename replaced by _bz_typename
	* blitz/array/reduce.cc: TinyVector<int,rank> replaced by
	TinyVector<int,T_expr::rank>
	* blitz/array/storage.h: in 
	template<int N_rank>
	class FortranArray : public GeneralArrayStorage<N_rank> {} and
	template<int N_rank>
	class ColumnMajorArray : public GeneralArrayStorage<N_rank> {}
	ordering_, ascendingFlag_, base_ replaced by this->ordering_,
	this->ascendingFlag_, this->base_
	noInitializeFlag() replaced by
	GeneralArrayStorage<N_rank>::noInitializeFlag()
	* blitz/array/where.h: minmax::max(minmax::max(stride1,stride2),stride3)
	replaced by
	stride1>(stride2=(stride2>stride3?stride2:stride3))?stride1:stride2
	* blitz/transversal.cc, blitz/transversal.h: template declaration
	template<int N_dimensions>
	_bz_typename TraversalOrderCollection<N_dimensions>::T_set
	    TraversalOrderCollection<N_dimensions>::traversals_;
	in blitz/transversal.cc moved before template specialisation
	template<>
	class TraversalOrderCollection<0> {}
	in blitz/transversal.h 
	* blitz/array/fastiter.h: for BZ_HAVE_STD only
	#include <strstream> replaced by #include <sstream> 
	ostrstream ostr replaced by ostringstream ostr
	* testsuite/matthias-troyer-1.cpp, testsuite/matthias-troyer-2.cpp:
	removed unnecessary includes for iostream.h and complex.h
	* examples/cfd.cpp: added #ifdef BZ_HAVE_STD for #include <fstream>
	* examples/haney.cpp: likewise for #include<valarray>
	* blitz/vecexpr.h: (re)inserted includes for vecbops, vecuops and vecbfn
	in order to compile testsuite/tinyvec.cpp
	* benchmarks/ct.cpp: removed (output of g++ -E)
	* benchmarks/acou3db4.cpp: corrected typo in 
	#include <blitz/array/stencil.h>, should be 
	#include <blitz/array/stencils.h>
	* benchmarks/acou3d.cpp: added #include <blitz/traversal.h> for call to
	generateFastTraversalOrder function
	* benchmarks/stencil.cpp: likewise
	* blitz/memblock.h: in the constructor
	MemoryBlock(size_t length, T_type* _bz_restrict data)
	dataBlockAddress_ = data replaced by dataBlockAddress_ = 0
	as it was before. (testsuite/extract does not crash then)
	* testsuite/matthias-troyer-2.cpp: changed the statement
	A = exp(c * (sqr(i-midpoint) + sqr(j-midpoint) + sqr(k-midpoint)));
	by
	A = zip( exp(c * (sqr(i-midpoint) + sqr(j-midpoint) + sqr(k-midpoint))),
	0.0, complex<double>());
	Still a problem with the complex stencil, right now the statement
	applyStencil(kinEnergy(),A,B); is commented


	
