2003-09-17  Julian Cummings  <cummings@artemis.cacr.caltech.edu>

	* configure.in: Switched the optimization flag for the SGI CC
	compiler back to -Ofast instead of -O3.  This setting includes the
	-IPA option, which seems to make a large difference in code
	performance.  Also, using the -IPA option does not seem to cause
	problems when using a static libblitz.a, which is now once again
	the default behavior of the configure script.  Also, bumped the
	version number to 0.7 in anticipation of a new tarball
	distribution.

2003-09-09  Julian Cummings  <cummings@artemis.cacr.caltech.edu>

	* configure.in: Activated automake macro that disables building of
	shared libraries by default.  Shared libraries support can be
	turned on with the --enable-shared option.  Changed SGI compiler
	default optimization flag from -Ofast to -O3 to avoid issues with
	the use of interprocedural analysis (-IPA) during compilation and
	linking.  Removed some defunct compiler options such as KCCdev and
	the old API-specific SGI32 and SGI64 options (use --enable-64bit
	instead).  Removed linking with SGI libCio.a, which should now be
	obsolete.  Deleted a few unused autoconf/automake macros.
	Corrected instruction message at end of script.

	* blitz/vecexpr.h: Corrected a dependency problem noted by
	Matthias Schillinger that was causing some test codes to fail to
	compile.  This is an example of the problem with having ET support
	for the Vector and TinyVector types convolved together.

2003-09-08  Julian Cummings  <cummings@artemis.cacr.caltech.edu>

	* blitz/rand-mt.h: Replaced use of &S[0] syntax with call to
	S.begin() to avoid issues with the return type of
	std::vector<>::operator[].  Added call to reload() at the end of
	the seed() function.
	* blitz/tinyveciter.h: Changed from use of unsigned to int type to
	avoid gcc compiler warnings about comparisons between unsigned and
	signed integer types.  Extended BZPRECONDITION checks to test that
	int argument value is non-negative.

2003-09-02  Julian Cummings  <cummings@artemis.cacr.caltech.edu>

	* blitz/array/methods.cc: Fixed bug in code that constructs an
	Array from an array expression.  The default value for the
	ordering and ascending variables when there is no Array with a
	defined shape in the expression is INT_MIN, not INT_MAX.
	* blitz/vecuops.cc: Freshly generated vecuops.cc header with new
	support for conj() function.
	* blitz/generate/genvecuops.cpp: Added support for complex math
	operations and added conj() to list of generated unary operations
	for vector types.
	* blitz/vecexpr.h: Added missing unary minus operator for
	VectorPick and TinyVector types.

2003-07-22  Julian Cummings  <cummings@artemis.cacr.caltech.edu>

	* blitz/array/methods.cc: Patch from Derrick Bass to correct a bug
	that could lead to incorrect Array ordering data when performing
	reductions.

2003-06-25  Julian Cummings  <cummings@artemis.cacr.caltech.edu>

	* blitz/array/fastiter.h: FastArrayIterator now uses
	ConstPointerStack helper class.
	* blitz/array/iter.h: Added helper class ConstPointerStack that
	manages an array of saved const data pointers used in array
	iterators.  Moving the array of saved pointers into a separate
	class eliminates compiler warnings about potentially unsafe
	assignments between restricted and unrestricted pointers in the
	same scope.  ArrayIterator and ConstArrayIterator now have
	ConstPointerStack data members.
	* blitz/memblock.cc: Allocate memory block using unrestricted
	pointer dataBlocxkAddress_ and then assign to restricted pointer
	data_ to eliminate compiler warnings about assignments between
	restricted pointers.
	* blitz/memblock.h: Removed restrict label from dataBlockAddress_
	pointer, since only the data_ pointer is used in expression
	evaluation and needs to be restricted.
	* configure.in: Added -qhot to list of C++ optimization flags for
	IBM xlC compiler, since it now supports higher-order transforms as
	of version 6.0.

2003-06-16  Patrick Guio <patrick.guio@fys.uio.no>
	* configure.in: Fixed 2 flags setting for CC/SGI. 

2003-05-16  Julian Cummings  <cummings@artemis.cacr.caltech.edu>

	* blitz/array/map.h: Fixed error in ascending() method reported by
	Derrick Bass.  The name of the corresponding method in the Array
	class is isRankStoredAscending().  This method returns a bool, but
	it is treated here as an int for the purposes of doing a reduction
	across operands.

2003-05-16 Patrick Guio <patrick.guio@fys.uio.no>
        * configure.in: Fixed several bugs for CC/SGI setup. Library Cio should be
	included as well as -ptused.

2003-05-09 Patrick Guio <patrick.guio@fys.uio.no>
	* doc/stencils/Makefile.am: Fixed lib path to be used with libtool stuff

2003-04-02 Patrick Guio <patrick.guio@fys.uio.no>
	* blitz/array/resize.cc: Added the definition of the Array class member 
	function resize(...) with Range argument as it was declared already
	present in the Array class declaration.

2003-03-31 Patrick Guio <patrick.guio@fys.uio.no>
	* lib/Makefile.am: Enable required libtool library target libblitz.la since
	AC_PROG_LIBTOOL is now in use.

2003-03-28 Theodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>

    * configure.in: Re-enable AC_PROG_LIBTOOL and disable AC_PROG_RANLIB
    since now libtool is used.

2003-03-28 Theodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>

    * doc/examples/Makefile.am: Added $(top_builddir) in include path
    for compilation in separate directory. Link against $(top_builddir)
    instead of $(top_srcdir) for the same reason.
    * doc/stencils/Makefile.am: Ditto.

2003-03-13  Julian Cummings  <cummings@artemis.cacr.caltech.edu>

	* blitz/range.h: Corrected my silly typo.
	* blitz/range.h: Modified Range::isAscendingContiguous() to return
	true for the case of a Range that contains just a single element,
	since this is a valid Range for constructing an Array.
2003-02-27  Patrick Guio <patrick.guio@fys.uio.no>
	* blitz/array/Makefile.am: Added newet-macros-old.h in the headers
	list to install.

2003-02-20  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* blitz/bzdebug.h: Added BZ_DEBUG_PARAM macro to suppress argument
	name if it is only used within optional debugging code.  This will
	allow us to eliminate compiler warnings about unused parameters
	that occur when debugging code is disabled.  Also tidied up
	formatting of some of the other macro definitions.
	* blitz/array-impl.h: Use BZ_DEBUG_PARAM macro to eliminate
	compiler warnings about unused parameters that appear only in
	optional debugging code.
	* blitz/array/expr.h: Use BZ_DEBUG_PARAM macro to eliminate
	compiler warnings about unused parameters that appear only in
	optional debugging code.
	* blitz/array/stencils.cc: Use BZ_DEBUG_PARAM macro to eliminate
	compiler warnings about unused parameters that appear only in
	optional debugging code.
	* blitz/array/indirect.h: Use BZ_DEBUG_PARAM macro to eliminate
	compiler warnings about unused parameters that appear only in
	optional debugging code.
	* examples/rand2.cpp: Corrected mismatch between printf format
	string and argument type.
	* examples/tiny2.cpp: Include tinyvec-et.h header rather than
	tinyvec.h to get ET support.
	* examples/curldiv.cpp: Made some repairs to this example code so
	that it properly uses stencil ops.

2003-02-14  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* testsuite/matthias-troyer-2.cpp: Uncommented line which applies
	the user-defined stencil.  With the recent fixes to
	blitz/array/stencilops.h, this code now works as expected.
	* blitz/array/stencilops.h: Changed A to (*A) as needed in stencil
	op definitions.  This is necessary because A is an iterator type,
	and the conversion operator is not automatically called when
	T_numtype is not a built-in type.  Also made stencil op
	definitions a bit more readable and fixed a typo in backward42
	multicomponent stencil.  Factorized the central difference
	expressions.
	* blitz/array/stencils.cc: Removed names of unused parameters in
	calcStencilExtent to eliminate gcc compiler warnings.
	* blitz/array/stencil-et.h: Removed name of unused parameter to
	eliminate gcc compiler warning.

2003-02-07  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* blitz/indexexpr.h: Eliminated gcc compiler warnings about
	explicitly initializing base class ETBase in IndexPlaceholder copy
	constructor.
	* blitz/array/expr.h: Removed names of some unused parameters in
	_bz_ArrayExprConstant member functions to eliminate gcc compiler
	warnings.  Eliminated gcc compiler warnings about explicitly 
	initializing base class ETBase in _bz_ArrayExpr copy constructor.
	* blitz/array/reduce.h: Removed names of some unused parameters in
	_bz_ArrayExprReduce member functions to eliminate warnings from
	gcc compiler.
	* blitz/array/map.h: Removed names of unused parameters in some
	ArrayIndexMapping member functions to eliminate warnings from gcc.
	* blitz/array-impl.h: Removed names of unused parameters in
	slice() function to eliminate compiler warnings from gcc.
	Eliminated gcc compiler warnings about explicitly initializing 
	base classes MemoryBlockReference and ETBase in Array copy
	constructor.
	* blitz/array/slicing.cc: Removed name of an unused parameter in
	slice() function to eliminate a warning from gcc compiler.
	* blitz/array/iter.h: Removed name of unused Array parameter when
	constructing a ConstArrayIterator with a _bz_endTag specifier.
	Eliminates a warning from gcc.
	* blitz/benchext.cc: Changed type of some loop variables from int
	to unsigned to avoid comparisons between int and unsigned
	expressions.  Eliminated some unnecessary comparisons of unsigned
	quantities with zero.
	* blitz/benchext.h: Changed type of data members numParameters_
	and parameterNumber_ from int to unsigned, since these can never
	be negative.
	* blitz/array/stencils.cc: Removed names of unused parameters in
	function getStencilExtent() to eliminate gcc warnings.
	* blitz/meta/matassign.h: Removed names of some unused parameters
	in fully specialized versions of _bz_meta_matAssign::f() to
	eliminate gcc warnings.
	* blitz/blitz.h: Added "mutable" keyword (if available) to macro
	definition for declaring a mutex object.  Need to make mutex
	mutable when it is a member of a class with const member functions
	that use the mutex, as is the case with the MemoryBlock class when
	using threads.  This addresses a problem noted by Patrik Jonsson
	<patrik@ucolick.org>.

2003-02-05 Patrick Guio <patrick.guio@fys.uio.no>
        * depcomp install-sh mkinstalldirs missing: Removed from repository
	since generated running `autoreconf -v -i'.
	* Makefile.am: Added a guard to avoid overwriting COPYING and INSTALL
	files when running `autoreconf -v -i -f'.
	* benchmarks/Makefile.am doc/Makefile.am doc/examples/Makefile.am
	doc/stencils/Makefile.am examples/Makefile.am testsuite/Makefile.am:
	Do not install anything from these directories except blit.info into
	$prefix/info and  blitz.ps into $prefix/doc.
	* config.guess config.sub: Removed from repository. Added automatically
	when running `autoreconf -v -i' for recent versions of autoconf or copied
	manually from the `share' directory of automake for earlier version of
	autoconf.

2003-01-23 Patrick Guio <patrick.guio@fys.uio.no>
	* blitz/Makefile.am blitz/generate/Makefile.am: Added dependencies
	and building rule for the generated .cc and .h files.

2003-01-22  Julian Cummings  <cummings@artemis.cacr.caltech.edu>

	* blitz/array/asexpr.h: Placed a guard around new
	BzUnaryExprResult and BzBinaryExprResult code so it is only used
	if compiler supports templates as template arguments.

2003-01-22 Patrick Guio <patrick.guio@fys.uio.no>
	* doc/stencils/*.texi: Removed from repository since generated by `make'.
	* doc/examples/*.{texi,out}: Likewise.
	* doc/stencils/Makefile.am: Added *.texi in clean-local target
	* doc/examples/Makefile.am: Added *.texi and *.out in clean-local target.
	Prefix ./ to $<  in .out building rule.
	* configure.in: Removed unecessary AC_PROG_MAKE_SET.
	* blitz/generate/genmathfunc.cpp: Fixed the generation of a few functions:
	the `isnan' function into `blitz_isnan' to avoid trouble with the macro
	definition of `isnan' on some platforms like Compaq/cxx and HP/aCC,
	added prettyPrint template member function for class template _bz_negate,
	added condition BZ_HAVE_COMPLEX_MATH for the specialization of _bz_sqr for
	complex<T>.
	* blitz/generate/genmatuops.cpp: Undo blitz_isnan to isnan.
	* blitz/generate/genvecuops.cpp: Undo blitz_isnan to isnan.
	* blitz/generate/genmathfunc.cpp: Removed implicit conversion from string
	literal to char* in `one' and `two' functions by `const' the function
	prototypes. 

2003-01-21  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* blitz/generate/genmathfunc.cpp: Fixed categorization and scoping
	problems with fmod, ilogb and isnan.
	* blitz/generate/genvecuops.cpp: Renamed blitz_isnan to isnan.
	* blitz/generate/genmatuops.cpp: Renamed blitz_isnan to isnan.
	* Makefile.am: Commented out references to demos subdirectory.
	* doc/stencils/Makefile.am: Prefix ./ to dump-stencils command.
	* blitz/generate/genarrbops.cpp: Generate bops.cc header file in
	blitz/array subdirectory.
	* blitz/generate/genmatbops.cpp: Generate matbops.h header file in
	parent directory.
	* blitz/generate/genmathfunc.cpp: Generate mathfunc.h header file
	in parent directory.
	* blitz/generate/genvecbops.cpp: Generate vecbops.cc header file
	in parent directory.
	* blitz/generate/genvecwhere.cpp: Generate vecwhere.cc header file
	in parent directory.
	* blitz/generate/genarruops.cpp: Generate uops.cc in blitz/array
	subdirectory.
	* blitz/generate/genmatuops.cpp: Generate matuops.h in parent
	directory.  Added missing implementation of function two().
	* blitz/generate/genvecuops.cpp: Generate vecuops.cc in parent
	directory.  Added missing implementation of function two().
	* blitz/generate/genpromote.cpp: Generate promote-old.h header in
	parent directory.  Fixed return code.
	* blitz/generate/Makefile.am: Added generate-headers target to run
	programs in blitz/generate subdirectory.
	* blitz/array/Makefile.am: Added genheaders target to handle blitz
	headers that are generated in blitz/generate subdirectory.
	* blitz/Makefile.am: Added genheaders target to handle blitz
	headers that are generated in blitz/generate subdirectory.
	* blitz/Makefile.am: Reorder subdirectories so that necessary
	header files are generated prior to building in array
	subdirectory.

2003-01-21 Patrick Guio <patrick.guio@fys.uio.no>
	* doc/stencils/Makefile.am: Removed an important comment.
	* doc/stencils/Makefile.in: Regenerated by "autoreconf -v" (autoconf 2.53
	and automake 1.6.2).
	* doc/examples/.cvsignore: Added programs.
	* doc/doxygen/.cvsignore: New file.
	* doc/examples/range.cpp: Fixed a bug in the initialisation of array A.
	* doc/examples/range.texi: Regenerated.
	* doc/blitz.info: Regenerated.

2003-01-21 Patrick Guio <patrick.guio@fys.uio.no>
	* doc: New directory that should contain any form of documentation; Currently
	the Texinfo documentation files were ported from the original documentation
	written for the `yodl' documentation program.
	* doc/blitz.info: New file. Generated by makeinfo when running make. Added
	to avoid problem is makeinfo not present.
	* doc/about.texi doc/arrays-stencils.texi doc/install.texi
	doc/arrays-ctors.texi doc/arrays-storage.texi doc/legal.texi
	doc/arrays-debug.texi doc/arrays-types.texi doc/numinquire.texi
	doc/arrays-expr.texi doc/arrays-usertype.texi doc/parallel.texi
	doc/arrays-globals.texi doc/blitz.texi doc/platforms.texi
	doc/arrays-indirect.texi doc/compiling.texi doc/random.texi
	doc/arrays-intro.texi doc/constants.texi doc/tau.texi doc/arrays-io.texi
	doc/copyright.texi doc/tinymatrix.texi doc/arrays-members.texi
	doc/download.texi doc/tinyvector.texi doc/arrays-multi.texi doc/faq.texi
	doc/tuning.texi doc/arrays-slicing.texi doc/help.texi doc/version.texi: 
	New files. the Texinfo documentation files.
	* doc/blitz.gif doc/sinsoid.eps doc/slice.txt doc/tensor1.gif
	doc/blitztiny.jpg doc/sinsoid.gif doc/strideslice.eps doc/tensor1.txt
	doc/indirect.eps doc/sinsoid.txt doc/strideslice.gif doc/indirect.gif
	doc/slice.eps doc/strideslice.txt doc/indirect.txt doc/slice.gif
	doc/tensor1.eps doc/indirect.fig doc/slice.fig doc/strideslice.fig
	doc/tensor1.fig: New files. Pictures in different format for the
	documentation.
	* doc/texinfo.tex: New file. Texinfo definition file.
	* doc/Makefile.am: New file.  
	* doc/makedatestring doc/mdate-sh doc/Makefile.in: New files. Generated by
	"autoreconf -v" (autoconf 2.53 and automake 1.6.2).
	* doc/stamp-vti: New file. Date and version of the doc. Generated by
	running `make stamp-vti'.
	* doc/.cvsignore: New file.
	* doc/stencils: New directory. Contains stencil Texinfo documentation.
	* doc/stencils/backward11.texi doc/stencils/central34.texi
	doc/stencils/backward12.texi doc/stencils/central42.texi
	doc/stencils/backward21.texi doc/stencils/central44.texi
	doc/stencils/backward22.texi doc/stencils/forward11.texi
	doc/stencils/backward31.texi doc/stencils/forward12.texi
	doc/stencils/backward32.texi doc/stencils/forward21.texi
	doc/stencils/backward41.texi doc/stencils/forward22.texi
	doc/stencils/backward42.texi doc/stencils/forward31.texi
	doc/stencils/central12.texi doc/stencils/forward32.texi
	doc/stencils/central14.texi doc/stencils/forward41.texi
	doc/stencils/central22.texi doc/stencils/forward42.texi
	doc/stencils/central24.texi doc/stencils/Laplacian2D4.texi
	doc/stencils/central32.texi doc/stencils/Laplacian2D.texi: New files.  Can
	be generated by making target `stencils'.
	* doc/stencils/dump-stencil.cpp: New file. To generate the stencils
	documentation files.
	* doc/stencils/Makefile.am: New file. 
	* doc/stencils/Makefile.in: New file. Generated by "autoreconf -v"
	(autoconf 2.53 and automake 1.6.2).
	* doc/stencils/.cvsignore: New file.
	* doc/examples: New directory. Contains codes and output that are included
	in the documentation.
	* doc/examples/cast.cpp doc/examples/output.cpp doc/examples/debug.cpp
	doc/examples/range.cpp doc/examples/dump.cpp doc/examples/simple.cpp
	doc/examples/fixed-class.cpp doc/examples/slicing.cpp
	doc/examples/fixed.cpp doc/examples/storage.cpp doc/examples/io.cpp
	doc/examples/strideslice.cpp doc/examples/outer.cpp doc/examples/xor.cpp:
	New files. Code samples to be used to include in the documentation.
	* doc/examples/cast.texi doc/examples/output.texi
	doc/examples/debug.texi doc/examples/range.texi
	doc/examples/dump.texi doc/examples/simple.texi
	doc/examples/fixed-point.texi doc/examples/slicing.texi
	doc/examples/fixed.texi doc/examples/storage.texi
	doc/examples/io.texi doc/examples/strideslice.texi
	doc/examples/outer.texi doc/examples/xor.texi: New files. Files to be
	included in the documentation. Can be generated from the .cpp files by
	making target `texi'.
	* doc/examples/makefile.example: New file. Makefile sample to be included
	in the documentation.
	* doc/examples/cast.out doc/examples/outer.out
	doc/examples/storage.out doc/examples/debug.out doc/examples/output.out
	doc/examples/strideslice.out doc/examples/dump.out
	doc/examples/range.out doc/examples/xor.out doc/examples/fixed.out
	doc/examples/simple.out doc/examples/io.out doc/examples/slicing.out: New
	files. Sample output to be included in the documentation. Can be generated
	by making target `out'.
	* doc/examples/fixed-point.h doc/examples/io.data: New files. Needed to
	generate the documentation.
	* doc/examples/Makefile.am: New file.
	* doc/examples/Makefile.in: New file. Generated by "autoreconf -v"
	(autoconf 2.53 and automake 1.6.2).
	* doc/examples/.cvsignore: New file.
	* doc/doxygen: New directory for doxygen documentation.
	* doc/doxygen/blitz.doxygen: New file. Configuration file needed by
	doxygen to generate html and latex documentations. The command is then
	`doxygen blitz.doxygen'.
	* configure.in: Added creation of Makefiles in doc directory in
	AC_CONFIG_FILES. Updated version of Blitz in AM_INIT_AUTOMAKE.
	* Makefile.am: Removed `demos' and `manual' and added `doc' in SUBDIRS.
	* configure: Regenerated by `autoreconf -v' 
	(autoconf 2.53 and automake 1.6.2).
	* Makefile.in: Likewise.

2003-01-14 Patrick Guio <patrick.guio@fys.uio.no>
	* blitz/applics.h blitz/array-impl.h blitz/array-old.h blitz/array.h
	blitz/bench.[cc,h] blitz/benchext.[cc,h] blitz/blitz.h blitz/bzdebug.h
	blitz/compiler.h blitz/etbase.h blitz/extremum.h blitz/funcs.h
	blitz/indexexpr.h blitz/limits-hack.h blitz/listinit.h blitz/matdiag.h
	blitz/matexpr.h blitz/matgen.h blitz/mathf2.h blitz/matltri.h
	blitz/matref.h blitz/matrix.[cc,h] blitz/matsymm.h blitz/mattoep.h
	blitz/matutri.h blitz/memblock.[cc,h] blitz/minmax.h blitz/mstruct.h
	blitz/numinquire.h blitz/numtrait.h blitz/ops.h blitz/prettyprint.h
	blitz/promote.h blitz/rand-dunif.h blitz/rand-normal.h blitz/rand-tt800.h
	blitz/rand-uniform.h blitz/random.h blitz/randref.h blitz/range.h
	blitz/reduce.h blitz/shapecheck.h blitz/tau.h blitz/timer.h  blitz/tiny.h
	blitz/tinymat.h blitz/tinymatexpr.h blitz/tinymatio.cc blitz/tinyvec-et.h
	blitz/tinyvecio.cc blitz/tinyveciter.h blitz/traversal.cc traversal.h
	blitz/tuning.h blitz/tvcross.h blitz/tvecglobs.h blitz/update.h
	blitz/vecaccum.cc blitz/vecall.cc blitz/vecany.cc vecbops.cc
	blitz/veccount.cc blitz/vecdelta.cc blitz/vecdot.cc blitz/vecexpr.h
	blitz/vecexprwrap.h blitz/vecglobs.[cc,h] blitz/vecio.cc blitz/veciter.h
	blitz/vecmax.cc blitz/vecmin.cc blitz/vecnorm.cc blitz/vecnorm1.cc
	blitz/vecpick.[cc,h] blitz/vecpickio.cc blitz/vecpickiter.h
	blitz/vecsum.cc blitz/vector-et.h blitz/vector.[cc,h] blitz/vecuops.cc
	blitz/vecwhere.[cc,h] blitz/zero.[cc,h]: Removed the cvs log and added
	them to the ChangeLog  

2003-01-13 Patrick Guio <patrick.guio@fys.uio.no>
	* benchmarks/acou3df2.f benchmarks/acou3df90.f90
	benchmarks/acou3df902.f90: Removed the cvs log and added them to the
	ChangeLog
	* random/mt.h: Likewise
	* manual/examples/storage.cpp: Likewise
	* manual/blitz02.html: Likewise
	* compiler/bzconfig: Likewise
	* examples/array.cpp examples/cast.cpp examples/deriv.cpp examples/erf.cpp
	examples/fixed.cpp examples/matmult.cpp examples/numinquire.cpp
	examples/outer.cpp examples/pick.cpp examples/qcd.cpp examples/rangexpr.cpp
	examples/reduce.cpp examples/simple.cpp examples/slicing.cpp
	examples/storage.cpp examples/tiny.cpp examples/where.cpp: Likewise
	* blitz/meta/dot.h blitz/meta/matassign.h blitz/meta/matmat.h
	blitz/meta/matvec.h blitz/meta/metaprog.h blitz/meta/product.h
	blitz/meta/sum.h blitz/meta/vecassign.h: Likewise
	* blitz/generate/bzfstream.h blitz/generate/genarrbops.cpp
	* blitz/generate/genmatbops.cpp blitz/generate/genmatuops.cpp
	* blitz/generate/genvecbops.cpp: Likewise
	* blitz/tinyvec.[cc,h]: Likewise
	* blitz/tinyvec.[cc,h]: Added a templated constructor for TinyVector that
	construct from another TinyVector with the same length but a different
	element type

2003-01-10 Theodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>
    * blitz/array/*.h: Removed the cvs log and added them to the ChangeLog.

2003-01-08 Theodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>
    * configure.in: Removed demos/Makefile from the generated files since this
    directory is empty for now.
    * blitz/array/asexpr.h: Introduce BzUnaryExprResult and BzBinaryExprResult
    to describe the type of an expression.
    * blitz/array/newet-macros.h: Use it here. Add a cast in
		BZ_DECLARE_FUNCTION2 to avoid a warning.

2003-01-07 Patrick Guio <patrick.guio@fys.uio.no>
	* Makefile.in benchmarks/Makefile.in bin/Makefile.in
	blitz/array/Makefile.in blitz/generate/Makefile.in blitz/meta/Makefile.in
	compiler/Makefile.in examples/Makefile.in lib/Makefile.in
	manual/examples/Makefile.in manual/stencils/Makefile.in random/Makefile.in
	src/Makefile.in testsuite/Makefile.in: Regenerated with "autoreconf -v"
	(autoconf 2.53 and automake 1.6.2).
	* configure.in: Likewise.
	* blitz/generate/arroperands.h blitz/generate/genmathfunc.cpp: Added
	#include <string> (as in blitz/generate/operands.h and
	blitz/generate/operands2.h) that was needed for strcmp() and strlen()
	functions call.
	* blitz/generate/.cvsignore: Added .deps and gen* progs
	* manual/examples/.cvsignore manual/stencils/.cvsignore: Added .deps
	* benchmarks/Makefile.am lib/Makefile.am blitz/generate/Makefile.am:
	the clean-local target should remove recursively template directories like
	cxx_repository and ti_files. 
	* benchmarks/Makefile.in lib/Makefile.in blitz/generate/Makefile.in:
	Regenerated with "autoreconf -v" (autoconf 2.53 and automake 1.6.2).
	* compiler/.cvsignore benchmarks/.cvsignore blitz/generate/.cvsignore
	lib/.cvsignore: Added template directory cxx_repository.

2003-01-06 Theodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>
    * configure.in: Do not substitute the variable SUBDIRS. Created
      a new old-gcc compiler option. Updated the gcc compiler option
      for modern gcc (at least >=3.1).
    * All Makefiles.am: Remove SUBDIRS where appropriate.
    * testsuite/Makefile.am, examples/Makefile.am: Use top_builddir
      instead of top_srcdir to allow building in a separate directory.
    * blitz/generate/Makefile.am: Partial rewrite to allow the build
      of the generation programs.

2003-01-06 Theodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>
    * testsuite/reduce.cpp: Bug correction.

2003-01-06 Theodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>
    * blitz/generate/*.[h,cpp]: Update to ISO C++.
    * blitz/compiler/tempkey.cpp: Update to ISO C++ (and g++-3.4).
    * blitz/array-impl.h: Partial update to ISO C++ syntax (needed for g++-3.4).
    
2002-12-21 Patrick Guio <patrick.guio@fys.uio.no>
	* benchmarks/daxpy.cpp: prefer new C++ cast to old C style cast

2002-12-19  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* blitz/meta/vecassign.h: Removed names of function arguments in
	the static methods of the _bz_meta_vecAssign<0,0> specialization
	to eliminate compiler warnings about unused variables.
	* blitz/array/eval.cc: Several changes to eliminate compiler
	warnings about unused variables.
	* testsuite/extract.cpp: Uncommented a couple of additional tests.
	* testsuite/free.cpp: Removed an unused variable.
	* blitz/range.h: Removed name of an unused function argument.
	* testsuite/module1.cpp: Removed an unused variable.

2002-12-17 Patrick Guio <patrick.guio@fys.uio.no>
	* benchmarks/acousticf2.f: fixed in commented test prog call to 
	echo_f77Tuned instead of echo_f77, duplicate echo_f77_set into echo_f77_set2
	to allow independant compilation of test prog
	* benchmarks/acou3df.f: Added support for test prog 
	* benchmarks/acou3df2.f: Added support for test prog, added explicit INTEGER
	declaration for i,j,k in subroutine acoustic3d_f77Tuned_stencil
	* benchmarks/acou3d.cpp: number of operations in variable Mflops corrected
	from 9 (in acoustic.cpp) to 11  
	* benchmarks/ctime3v.cpp benchmarks/ctime4v.cpp benchmarks/ctime5v.cpp: Added
	necessary overloaded math functions for float type argument for gcc 2.95.3
	* benchmarks/ctime5.cpp: replaced in macro BZ_USING_NAMESPACE

2002-12-16 Patrick Guio <patrick.guio@fys.uio.no>
	* configure.in: Added as suggested by Zane Dodson <zdodson@zdodson.com> 
	the AM_MAINTAINER_MODE automake macro to avoid generating the rules to
	rebuild these out-of-date maintainer files by default. To rebuild them run
	configure with the option --enable-maintainer-mode
	* aclocal.m4: Regenerated by autoreconf 2.53 
	* configure: Regenerated by autoreconf 2.53
	* Makefile.in benchmarks/Makefile.in bin/Makefile.in blitz/Makefile.in
	blitz/array/Makefile.in blitz/generate/Makefile.in blitz/meta/Makefile.in
	compiler/Makefile.in examples/Makefile.in lib/Makefile.in
	manual/Makefile.in manual/examples/Makefile.in manual/stencils/Makefile.in
	random/Makefile.in src/Makefile.in testsuite/Makefile.in: Regenerated by
	autoreconf 2.53

2002-12-12 Patrick Guio <patrick.guio@fys.uio.no>
	* aclocal.m4: updated using the autoconf tool autoreconf 2.53 that is
	dedicated to update generated configuration files

2002-12-10 Patrick Guio <patrick.guio@fys.uio.no>
	* benchmarks/loops.data: New file. Input file for benchmarks/makeloop
	* configure.in: Added flag -fno-second-underscore for GNU g77 and
	fixed CXXFFLAGS for that compiler.
	When using g77 and linux assume no Fortran 90 compiler  is available. 
	Added AM_CONDITIONAL call to allow benchmarking without Fortran 90
	compiler available.
	Fixed AC_CHECK_LIB(blas, ...), added extra arguments to take into account
	necessary extra libs (needed for linux)
	* benchmarks/Makefile.am: Added conditional compilation code using
	automake conditional flag generated by AM_CONDITIONAL() in configure.in
	* configure: Rebuilt with autoconf 2.53
	* Makefile.in benchmarks/Makefile.in bin/Makefile.in blitz/Makefile.in
	blitz/array/Makefile.in blitz/generate/Makefile.in blitz/meta/Makefile.in
	compiler/Makefile.in examples/Makefile.in lib/Makefile.in
	manual/Makefile.in manual/examples/Makefile.in manual/stencils/Makefile.in
	random/Makefile.in src/Makefile.in testsuite/Makefile.in: Rebuilt with
	automake 1.6.2
	* benchmarks/makeloops.cpp: Modified to allow the generation of loops
	kernel benchmark without Fortran 90 compiler available. Do not generate
	makefile.inc. Generate Fortran 90 routines with .f90 extension
	* benchmarks/loop?.cpp: Regenerated from makeloop program and loops.data
	* benchmarks/.cvsignore: Added qcd.m and makeloops
	* benchmarks/daxpy.cpp: bench conditionnaly valarray and f90 routines if 
	C++ header and Fortran 90 are availabel respectively
	* benchmarks/qcd.cpp: use /#if/#elif/#endif/ syntax for FORTRAN_SYMBOLS
	check
	* benchmarks/stencil.cpp: bench conditionnaly f90 routines if Fortran 90
	is available
	* benchmarks/haney.cpp: bench conditionnaly valarray and f90 routines if
	  C++ header and Fortran 90 are availabel respectively. Conditional
		compilation added to avoid a crash with GNU g++ 
	* benchmarks/acoustic.cpp: cosmetic changes. int cast added where necessary 
	to avoid warnings from g++
	* benchmarks/acou3df.f: Added declaration of k as INTEGER
	* benchmarks/acou3d.cpp: bench conditionnaly f90 routines if Fortran 90 is
	available. Reorganised in a way similar to benchmarks/acoustic.cpp
	* benchmarks/benchext.cc: Removed Blitz assert that could not be fullfiled
	in template BenchmarkExt<P_parameter>::setNumParameters(int numParameters)

2002-11-26  Julian Cummings  <cummings@artemis.cacr.caltech.edu>

	* benchmarks/qcdf.f: Corrected declaration of double precision
	complex arrays in subroutine qcdf.  Use type complex*16 and make
	site number the final (slowest varying) dimension.

Fri Oct 25 10:56:21 CEST 2002 Patrick Guio <patrick.guio@fys.uio.no>
	* configure.in: fixed Fortran compiler message for linux
	* configure: Rebuilt with autoconf 2.53

2002-10-17 Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* benchmarks/acou3df2.f: Removed some extraneous semicolons that were
	inhibiting compilation of these Fortran sources with some compilers.

2002-10-09 Patrick Guio <patrick.guio@fys.uio.no>
	* src/Makefile.am: Moved library target libblitz.a into lib directory 
	to avoid unecessary and not so clean target like making a copy into lib
	directory
	* src/Makefile.in: Rebuilt with automake 1.6.2
	* lib/Makefile.am: Added library target libblitz.a
	* lib/Makefile.in: Rebuilt with automake 1.6.2
	* Makefile.am: Modified src targets into lib where necessary
	* Makefile.in: Rebuilt with automake 1.6.2

2002-09-19  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* testsuite/Adnene-Ben-Abdallah-2.cpp: Skip part of this test when
	using IBM xlC compiler, since it can't handle it.
	* testsuite/extract.cpp: Added workaround for IBM xlC compiler
	bug.
	* compiler/ieeemath.cpp: Commented out unused variable.  Added
	test to skip over testing of lgamma() function if building on AIX
	platform in threaded mode.  This test causes a failure in this
	case because the lgamma function has a slightly different
	interface in thread-safe mode on AIX.
	* src/Makefile.am: Added explicit command for building libblitz.a
	that utilizes $AR_FLAGS.
	* src/Makefile.in: Regenerated from Makefile.am using automake.
	* configure.in: Cleaned up some of the settings of compiler flags
	and added use of the C++ compiler as the archiver for KCC and SGI
	CC.  Added new --enable-64bit option to trigger 64-bit
	configuration and builds.  This currently works for the SGI and
	IBM platforms with the native compilers or with KCC or gcc.  Note:
	I have left the old SGI64 and SGI32 compiler options in for now,
	but there is also a new plain old SGI option that will build with
	the default ABI.  Using the --enable-64bit option should then
	force 64-bit compiles.
	* configure: Regenerated from configure.in using autoconf.
	* blitz/array/fastiter.h: Removed meaningless restrict qualifier
	inside const_cast that generates compiler warnings under SGI and
	KCC compilers.

2002-09-05  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* configure: Regenerated from configure.in using autoconf.
	* configure.in: Added flag -qrtti=all when using IBM's xlC
	compiler to enable RTTI support.

2002-08-30  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* testsuite/storage.cpp: Modified construction of one Array to
	test new setStorage() method.
	* blitz/array/methods.cc: Added definition of setStorage() method,
	which lets user set Array storage format after construction.  We
	check that Array is not allocated first.
	* blitz/array-impl.h: Added declaration of setStorage() method,
	which lets user set Array storage format after construction.
	* blitz/array/storage.h: Added explicit assignment operator for
	GeneralArrayStorage class.

2002-07-24 Patrick Guio <patrick.guio@fys.uio.no>
	* configure.in: Removed occurences of -DBZ_DISABLE_XOPEN_SOURCE, this is
	the default and changed to -DBZ_ENABLE_XOPEN_SOURCE for DECcxx6.2 and 
	DECcxx6.3 required for scoping of ilogb. 
	* configure: Rebuilt from configure.in using autoconf 2.53
	* all Makefile.in: Rebuilt from Makefile.am using automake 1.6.2

2002-07-23  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* blitz/array/functorExpr.h: Changed _bz_FunctorExpr classes to
	store user-defined functor by value rather than by const
	reference.  This fixes a problem under certain compilers with the
	state of the user-defined functor being corrupted prior to
	evaluation of the Array expression.  Also, cleaned up remnants
	from previous use of Blitz minmax function.
	* blitz/array/expr.h: Added a four-argument templated constructor
	for _bz_ArrayExpr, which is needed when building an Array
	expression containing a functor that takes three arguments.  This
	is needed to support functorExpr.h, which allows functors with up
	to three arguments.
	* testsuite/newet.cpp: Changed expressions used in final test to
	ensure that two-argument pow() function is called with first
	argument being non-negative.  Otherwise, the results of the
	function call are undefined.

2002-07-19  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* blitz/blitz.h: Put ending semicolon into definition of
	BZ_MUTEX_* macros so that you don't need to add a semicolon after
	invoking the macro.
	* blitz/memblock.h: Removed ending semicolon after invocations of
	BZ_MUTEX_* macros.  This is now handled within the definition of
	these macros.  This should get rid of compiler warnings from SGI
	CC and others about extra semicolons being ignored, which happened
	when these macros were defined as blank.

2002-07-19 Patrick Guio <patrick.guio@fys.uio.no>
	* blitz/mathfunc.h: Added missing template member function prettyPrint
	in template class _bz_negate (HP aCC complained during library
	compilation).
	* blitz/array/functorExpr.h: minmax::max(a,b) replaced by (a>b?a:b) due to
	namespacing trouble with HP/aCC

2002-07-17  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* blitz/memblock.h: Added missing semicolon after use of
	BZ_MUTEX_DECLARE macro.

2002-07-16  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* Makefile.am: Added line to specify subdirectories and insure
	that compiler subdirectory is visited before blitz subdirectory.
	This is necessary because the compiler subdirectory generates the
	config.h header file needed in blitz subdirectory.
	* Makefile.in: Rebuilt from Makefile.am.
	* configure: Rebuilt from configure.in.  Includes changes to IBM
	xlf90 flags.
	* aclocal.m4: Rebuilt using aclocal 1.6.2.
	* blitz/Makefile.am: Added config.h to blitz_HEADERS list and
	removed all the compiler-specific config files.  These
	compiler-specific files should no longer be needed because we
	normally generate the config.h file automatically.  Moved the
	compiler-specific headers to the EXTRA_DIST list so they will
	still be included in the distribution tarball.
	* blitz/Makefile.in: Rebuilt from Makefile.am.
	* blitz/array/funcs.h: Removed ET support for Array expressions
	involving ldexp(), jn() and yn() functions.  These functions
	require specialized macros that allow one of the function
	arguments to be an ordinary int.  Such macros have not yet been
	added to <blitz/funcs.h>.

2002-07-02  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* examples/cast.cpp: Added check for use of new-style expression
	templates.  I changed the syntax for casting the type of a blitz
	Array to make it simpler.  Instead of giving a second argument
	that is an instance of the new element type, just provide the new
	element type as a template parameter.
	* examples/array.cpp examples/deriv.cpp examples/erf.cpp examples/fixed.cpp
	examples/matmult.cpp examples/outer.cpp examples/pick.cpp examples/qcd.cpp
	examples/rangexpr.cpp examples/reduce.cpp examples/simple.cpp
	examples/slicing.cpp examples/storage.cpp examples/tiny.cpp
	examples/where.cpp: Updated to use new header file names that avoid
	capitalization.
	* testsuite/newet.cpp: Added testing of functorExpr.h header file,
	which provides support for declaring user-defined functors and
	class methods that act on Array types.  The code for this support
	originated from Derrick Bass of Caltech.
	* testsuite/tinyvec.cpp: Include blitz/tinyvec-et.h here to get ET
	support.
	* blitz/vecexpr.h: Undid the previous change to this file.  Vector
	ET support is now gotten by including blitz/vector-et.h
	explicitly.
	* blitz/promote.h: Added BZ_BLITZ_SCOPE to promote_trait in
	BZ_PROMOTE macro definition so that this macro works correctly
	outside the blitz namespace.
	* blitz/Makefile.am: Removed Array.h, Vector.h, TinyVec.h and
	TinyMat.h from blitz_HEADERS.  Added array-old.h, vector-et.h
	tinyvec-et.h and funcs.h.
	* blitz/Makefile.in: Rebuilt from Makefile.am to update
	blitz_HEADERS.
	* blitz/tinyvec-et.h: This is the new name for the TinyVec.h file, which
	includes the TinyVector class implementation and ET support using the old
	style expression templates.
	* blitz/array.h: This file used to be called Array.h but has been
	renamed to avoid name clashes on Windows-based systems.  This file
	includes only the Array class implementation files.
	* blitz/array-old.h: This is the new name for the old array.h header file
	that included all of the Array, TinyVector and Vector stuff along with
	Vector ET support. It is now deprecated.
	* blitz/array/newet-macros.h: Renamed and reorganized new style
	macros for declaring unary and binary functions/operators that act
	on Array types.
	* blitz/array/newet.h: Added #include of blitz/array/functorExpr.h
	to support user-defined functors and class methods acting on Array
	types.
	* blitz/array/funcs.h: Use new style of Array ET macros to declare
	unary and binary math functions that act on Array types.
	* blitz/array/ops.h: Use new style of Array ET macros to create
	unary and binary operators that act on Array types.
	* blitz/ops.h: Rewrote and reorganized this file to make better
	use of macros to generate all the functor classes needed to
	provide unary and binary operators for the "new" style of
	expression templates.
	* blitz/array/Makefile.am: Added functorExpr.h to list of
	array_HEADERS.
	* blitz/array/Makefile.in: Rebuilt from Makefile.am to include new
	header file.

2002-06-28  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* blitz/mathfunc.h: Corrected categorization of fmod and ilogb
	math functions.
	* blitz/vecuops.cc: Freshly generated from genvecuops.cpp.
	Changed BZ_HAVE_SYSV_MATH to BZ_HAVE_SYSTEM_V_MATH to match what
	is in config.h and elsewhere.  Corrected categorization of a few
	math functions.  Otherwise, no changes.
	* blitz/matuops.h: Freshly generated matuops.h header file with
	definitions for unary math functions operating on Matrix types.
	This file was previously empty.  I followed a style similar to
	that of vecuops.
	* blitz/matbops.h: Rebuilt from latest genmatbops.cpp.  Same
	content as before with slightly different formatting.  Also,
	binary combinations with complex<T> are now handled with a single
	templated ComplexOperand type as with vecbops.
	* blitz/generate: Added support for generating matuops.h header
	file borrowing heavily from the existing genvecuops code.  Also
	made a few corrections in categorization of math functions.
	* configure.in: Added -qstrict flag to F77 and F90 optimization
	flags on AIX platforms to avoid optimizations that might alter the
	code semantics, as suggested by the compiler.  Added flag for
	xlf90 compiler to allow f90 file suffix.
	* config.guess: Undo previous change to this script regarding use
	of oslevel script on AIX.  This was a mistake based on an error in
	my environment variable settings.

2002-06-27  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* compiler/sysvmath.cpp: Removed ilogb() and fmod() from this
	test.  ilogb() is now in the IEEE math test and fmod() should be
	in the standard C math library.
	* compiler/ieeemath.cpp: Added tests for cbrt() and ilogb() here.
	* compiler/getruse.cpp: Added code to check if getrusage() is
	available.
	* blitz/benchext.cc: Changed loop variable j to unsigned to
	eliminate signed/unsigned comparisons.
	* testsuite/complex-test.cpp: Added some explicit casts to float
	to eliminate precision loss warnings from implicit conversions of
	double to float.  Changed abs() to fabs() for floating-point
	arguments.  abs() is for ints or complex numbers, while fabs() is
	for floating-point numbers.
	* testsuite/chris-jeffery-1.cpp: Slight change to eliminate
	precision loss warning from double/float conversion.
	* blitz/array/storage.h: Use _bz_bool and _bz_true where
	appropriate to avoid int/bool conversions.
	* blitz/array/fastiter.h: Changed order of ctor initializers to
	match order of member data declarations, eliminating warning from
	gcc compiler.
	* blitz/array/slicing.cc: Modified valid indexing check to avoid
	casting to unsigned.
	* blitz/shapecheck.h: Changed loop variable i to unsigned to avoid
	unsigned/signed comparisons.
	* blitz/array-impl.h: Modified the isInRange() methods to check
	that each index value is greater than or equal to the base index
	value, rather than just casting (index-base) to an unsigned int.
	The latter gives unpredictable results if index<base and produces
	compiler warnings about comparisons between unsigned and signed
	quantities.
	* blitz/tinyvec.h: Changed return type of lengthCheck() method
	from int to _bz_bool.
	* testsuite/extract.cpp: Undid previous change and went back to
	using static const int data members instead of enums for red,
	green and blue.  These have to be actual ints, or else the Array
	operator[] does not work properly.  Need to investigate further
	the link-time error that occurs with this test code when using
	xlC.

2002-06-26  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* configure: Rebuilt from configure.in.
	* configure.in: Moved package and version arguments back to
	AM_INIT_AUTOMAKE macro call.  The new style suggested in the
	automake documentation doesn't seem to work right when the tarball
	name contains uppercase letters and is not trivially derived from
	the package name.
	* configure.in: Added section to handle xlC as a valid C++
	compiler option.  Moved package name and version number arguments
	to AC_INIT macro.  Moved AC_CANONICAL_TARGET macro call higher up
	in file to eliminate autoconf warning.
	* config.guess: Commented out use of oslevel command on AIX
	platform to get OS version and release info, since it does not
	always seem to report the right thing and can send confusing
	output to config.sub.
	* examples/Makefile.in: Rebuilt from examples/Makefile.am.
	* examples/Makefile.am: Added profile.cpp, tiny2.cpp and tiny3.cpp
	to EXTRA_DIST, so that these files will be included in the
	distribution tarball.  This is necessary because these files are
	not include in SOURCES and are not normally compiled.
	* testsuite/extract.cpp: Changed members red, green and blue of
	class RGB24 from static const int's to enumerators in order to
	avoid a link-time error with xlC compiler.
	* blitz/tinyvec.h: Changed P_numtype to T_numtype inside class
	definition consistently.
	* blitz/array-impl.h: Changed template parameter name T_numtype2
	to P_numtype2 in member function template declarataions for
	consistency with definitions and to avoid any confusion with
	typedef T_numtype.
	* blitz/array/slicing.cc: Changed T_numtype to P_numtype when used
	outside the argument list or body of a member function definition
	(i.e., outside the class scope).  Inside the class scope, we can
	use the typedef T_numtype.  The IBM xlC compiler gets confused if
	P_numtype is used as a template parameter name in a member
	function declaration and then T_numtype is used as the parameter
	name in the member function definition.  Fixed usage to be more
	consistent.
	* blitz/array/methods.cc: Likewise.
	* blitz/array/ops.cc: Likewise.
	* blitz/tinyvec.cc: Likewise.
	* blitz/array/et.h: Added #include of blitz/array/misc.cc if not
	using new expression templates.
	* blitz/array-impl.h: Explicitly specify second template argument
	for ListInitializationSwitch, rather than relying on the default
	value.  This eliminates a compilation problem using the xlC
	compiler.  Also removed #include of misc.cc, which is now handled
	in blitz/array/et.h.
	* blitz/tinymat.h: Likewise.
	* blitz/tinyvec.h: Likewise.

2002-05-27  Julian Cummings  <cummings@tis-sa-ack.cacr.caltech.edu>
	* blitz/array-impl.h: Removed use of this-> as means of accessing
	members of templated base class.  Instead provided using
	declarations for these members within the derived class
	definitions to bring them into the scope of the derived class.
	* blitz/array/slicing.cc: Likewise.
	* blitz/array/eval.cc: Likewise.
	* blitz/array/methods.cc: Likewise.
	* blitz/array/storage.h: Likewise.
	* blitz/array/stencil-et.h: Likewise.
	* blitz/array/iter.h: Likewise.
	* blitz/matrix.cc: Likewise.
	* blitz/vector.cc: Likewise.
	* blitz/memblock.h: Likewise. Changed this->addReference() to
	MemoryBlock<P_type>::addReference(). Use base class name as scoping
	qualifier rather than "this" pointer.
	* blitz/matrix.h: Likewise.
	* blitz/vector.h: Likewise.

2002-05-24 Patrick Guio <patrick.guio@fys.uio.no>
	* INSTALL: Added instruction for cvs repository installation in case a
	problem should occur with the build system.
	* configure.in: Removed some unecessary check
	* configure: Regenerated with autoconf 2.53, automake 1.6.1, libtool 1.4.2
	* every Makefile.in: Likewise

2002-05-23 Patrick Guio <patrick.guio@fys.uio.no>
	* configure.in: Added support for ranlib on SGI that failed and a few
	other tests. The variable RANLIB is set to "ar ts" for SGI as well as for
	DECcxx.
	* blitz/Makefile.am: Added tinymatio.cc in the blitz_HEADERS variable
	* configure: Regenerated with autoconf 2.53, automake 1.6.1, libtool 1.4.2
	* every Makefile.in: Likewise

2002-05-22  Julian Cummings  <cummings@artemis.cacr.caltech.edu>
	* blitz/array/eval.cc: Fixed bug in
	Array::evaluateWithIndexTraversal1() by removing cast of second
	argument to T_numtype in call to T_update::update().  This cast
	will occur automatically when the update operation is performed.
	This fixes a problem reported by Masahiro Tatsumi
	<tatsumi@nfi.co.jp> in which one could not assign a double to an
	Array of TinyVectors of double without explicitly constructing a
	TinyVector of doubles on the right-hand side.  Also fixed an
	unused variable warning emanating from the function
	Array::evaluateWithFastTraversal() by moving the definition of
	local variable "last" so that it is only seen if it is used.
	* blitz/tinymatio.cc: New file (I/O operations for blitz TinyMatrix)
	* blitz/tinymat.h: Added #include of <blitz/tinymatio.cc>

2002-05-10 Patrick Guio <patrick.guio@fys.uio.no>
	* blitz/randref.h: private constructor for template class _bz_VecExprRandom
	did not had an explicit initialiser for the private member random_, added
	it. 
	Compaq C++ V6.5-014 for Compaq Tru64 UNIX V5.1A (Rev. 1885) complained
	about this.
	* blitz/array/map.h: Likewise for template class ArrayIndexMapping

2002-05-08 Patrick Guio <patrick.guio@fys.uio.no>
	* configure.in: Regenerated by running the command autoupdate from 
	autoconf 2.53
	* configure: Regenerated by running the command autoreconf --force --install 
	with autoconf 2.53, automake 1.6.1, libtool 1.4.2
	* COPYING: Likewise
	* Makefile.in: Likewise
	* benchmarks/Makefile.in: Likewise
	* bin/Makefile.in: Likewise
	* blitz/Makefile.in: Likewise
	* blitz/array/Makefile.in: Likewise
	* blitz/generate/Makefile.in: Likewise
	* blitz/meta/Makefile.in: Likewise
	* compiler/Makefile.in: Likewise
	* examples/Makefile.in: Likewise
	* lib/Makefile.in: Likewise
	* manual/Makefile.in: Likewise
	* manual/examples/Makefile.in: Likewise
	* manual/stencils/Makefile.in: Likewise
	* random/Makefile.in: Likewise
	* src/Makefile.in: Likewise
	* testsuite/Makefile.in: Likewise
	* aclocal.m4: Likewise
	* install-sh: Likewise
	* missing: Likewise
	* mkinstalldirs: Likewise
	* depcomp: New file generated by running autoreconf --force --install
	with autoconf 2.53, automake 1.6.1, libtool 1.4.2
	* config.guess: imported from automake 1.6.1
	* config.sub: Likewise
	* benchmarks/Makefile.am: Removed target 'compile' that caused trouble when
	'make dist'
	* benchmarks/Makefile.in: Regenerated with automake
	* examples/Makefile.am: Removed targes 'compile' and 'all' that caused
	trouble when 'make dist'
	* examples/Makefile.in: Regenerated with automake

2002-04-17 Patrick Guio <patrick.guio@fys.uio.no>
	* blitz/array/stencil-et.h: replaced T_numtype with P_numtype in
	every macros definitions. Fixed a compilation problem with aCC/HP
	in the stencils examples (stencils2.cpp, stencil3.cpp, stencilet.cpp)
	in the directory examples. 
	Suggested by Robert W. Techentin <techentin.robert@mayo.edu>

2002-03-21 Patrick Guio <patrick.guio@fys.uio.no>
	* examples/io.cpp: Added #ifdef BZ_HAVE_STD for #include <fstream>
	* examples/polymorph.cpp: corrected polymorph container declaration 
	Array<Material&,1> by Array<Material*,1>
	* examples/prettyprint.cpp: Removed unecessary #include <iostream.h>
	* examples/rand2.cpp: Likewise
	* examples/rand2.cpp: Added return 0; to function int main2()
	* examples/tiny3.cpp: fixed typo #include <blitz/TinyMath.> into
	#include <blitz/TinyMat.h>
	* examples/Makefile.{am,in}: Removed targets tiny2.cpp (no int main()), 
	tiny3.cpp (no int main()) and profile.cpp (requires tau profiling)
	* array/stencil-et.h: replaced iter_ by this->iter_ in derived template
	classes of StencilExpr template class

2002-03-07 Patrick Guio <patrick.guio@fys.uio.no>
	* configure.in: f90 optimisation flag set to O3 for platform *hp-hpux*
	* blitz/array/io.cc: cosmetic change
	* blitz/traversal.h: moved 
	template<int N_dimensions>
	_bz_typename TraversalOrderCollection<N_dimensions>::T_set
	    TraversalOrderCollection<N_dimensions>::traversals_;
	after the declaration of 
	template<int N_dimensions> class TraversalOrderCollection
	* TODO: New file
	* blitz/array/expr.h: 
	line 124 
	#ifdef BZ_NEW_EXPRESSION_TEMPLATES replaced by
	#if defined(BZ_NEW_EXPRESSION_TEMPLATES) && ! defined(__MWERKS__)
	line 134 added 
	#if !defined(__MWERKS__)
	#endif
	as suggested by Xavier Warin <xavier.warin@der.edfgdf.fr> 
	for Metrowerks code warrior compiler
	* random/mt.h: fixed use of STL iterator as suggested by 
	Julian Cummings <cummings@cacr.caltech.edu> and 
	Osamu Ogasawara <oogasawa@ims.u-tokyo.ac.jp>
	* blitz/config-mwerks.h: New file, configuration file for Metrowerks code
	warrior compiler proposed by Xavier Warin <xavier.warin@der.edfgdf.fr>
	* INSTALL: updated with the new make targets
	* Makefile.am (in each directory): fixed a bug for the target dist
	* configure.in: Added support for Intel icf (Fortran 90 compiler) when 
	target is *linux* and CXX is Intel icc
	* benchmarks/Makefile: Added work.pc* in clean target, these files are
	generated when running Intel Fortran 90 compiler ifc
	* benchmarks/plot_benchmarks.m.in: New file to generate m-file
	benchmarks/plot_benchmarks.m to plot benchmarks results
	* configure.in: Added benchmarks/plot_benchmarks.m to be generated from
	benchmarks/plot_benchmarks.m.in
	* configure.in: output correctly the available DEC (actually now Compaq:-) 
	compilers
	* INSTALL: Likewise

2002-03-06 Patrick Guio <patrick.guio@fys.uio.no>
	* ChangeLog: New file.
	* testsuite/mattias-lindstroem-1: Removed (executable)
	* configure.in: updated with autoupdate (GNU autoconf) 2.49c, added support
	for HP-UX aCC and Intel icc.
	* aclocal.m4: renamed to acinclude.m4. It contains the *_BZ_* declarations
	* acinclude.m4: New file generated by running aclocal (GNU automake) 1.4a
	* Makefile.am (in each directory): New files (to generate a Makefile.in with
	automake)
	* bin/Makefile.in, blitz/Makefile.in, blitz/array/Makefile.in,
	* blitz/generate/Makefile.in, blitz/meta/Makefile.in, lib/Makefile.in,
	* manual/Makefile.in, manual/examples/Makefile.in,
	* manual/stencils/Makefile.in, random/Makefile.in,: New files generated
	from Makefile.am generated by running automake (GNU automake) 1.4a
	* .cvsignore (in each directory): New files
	* missing: New file generated when running the script autoconf -a -c -i
	(GNU autoconf) 2.49c
	* mkinstalldirs: Likewise
	* config.guess: updated from automake 1.4a
	* config.sub: Likewise
	* GPL: renamed to COPYING according to GNU standard
	* AUTHORS, COPYING, NEWS: New files to follow the GNU standard
	* benchmarks/*f90.f: renamed to benchmarks/*f90.f90
	* examples/complex.cpp: renamed to examples/complex-test.cpp
	* testsuite/complex.cpp: renamed to testsuite/complex-test.cpp due to
	interference with #include<complex>
	* Makefile.in, aclocal.m4, configure, benchmarks/Makefile.in,
	bin/Makefile.in, blitz/Makefile.in, blitz/array/Makefile.in,
	blitz/generate/Makefile.in, blitz/meta/Makefile.in, compiler/Makefile.in,
	demos/Makefile.in, examples/Makefile.in, lib/Makefile.in,
	manual/Makefile.in, manual/examples/Makefile.in,
	manual/stencils/Makefile.in, random/Makefile.in, src/Makefile.in,
	testsuite/Makefile.in: Regenerated files from Makefile.am generated by
	running automake (GNU automake) 1.4a
	* manual/examples/Makefile, manual/stencils/Makefile: Removed, now generated
	by configure
	* CHANGELOG: renamed to ChangeLog.1
	* manual/examples/*.out: renamed to manual/examples/*.log due to
	interference with automake
	* compiler/elabbase.cpp: bar() replaced by this->bar() in zowee() const for
	ANSI C++ correctness (14.6.2(3) in the C++ Standard)
	* src/globals.cpp: char* _blitz_id replaced by char _blitz_id[]
	* random/uniform.h: irng_.random() replaced by this->irng_.random()
	everywhere for ANSI C++ correctness (14.6.2(3) in the C++ Standard)
	* random/discrete-uniform.h: Likewise
	* random/normal.h: getUniform() replaced by this->getUniform() 
	* blitz/array-impl.h: data_ replaced by this->data_ everywhere,
	changeToNullBlock() replaced by this->changeToNullBlock(),
	class _bz_endTag replaced by struct _bz_endTag { } declaration
	* blitz/array/resize.cc: for (d=0; d < N_rank; ++d) replaced by for (int
	d=0; d < N_rank; ++d) (for scoping)
	* blitz/array/iter.h: 
	data_ replaced by this->data_ in 
	template<class T, int N>
	class ArrayIterator : public ConstArrayIterator<T,N> {},
	removed struct _bz_endTag { }; declaration
	* blitz/array/io.cc: Added typename (_bz_typename) qualifier to the
	iterator and const_iterator of Array<T_numtype,N_rank>
	* blitz/ops.h: `os' replaced by `str' in the BitwiseNot template
	* blitz/vector.h: data_ replaced by this->data_ everywhere
	* blitz/array/slicing.cc: Likewise
	* blitz/array/eval.cc: Likewise
	* blitz/array/methods.cc: data_ replaced by this->data_ everywhere
	numReferences() replaced by this->numReferences()
	* blitz/vector.cc: data_ replaced by this->data_ everywhere, 
	numReferences() by this->numReferences()
	* blitz/matrix.cc: data_ replaced by this->data_
	* blitz/matrix.h: Likewise everywhere
	* blitz/promote.h: typename replaced by _bz_typename
	* blitz/array/reduce.cc: TinyVector<int,rank> replaced by
	TinyVector<int,T_expr::rank>
	* blitz/array/storage.h: in 
	template<int N_rank>
	class FortranArray : public GeneralArrayStorage<N_rank> {} and
	template<int N_rank>
	class ColumnMajorArray : public GeneralArrayStorage<N_rank> {}
	ordering_, ascendingFlag_, base_ replaced by this->ordering_,
	this->ascendingFlag_, this->base_
	noInitializeFlag() replaced by
	GeneralArrayStorage<N_rank>::noInitializeFlag()
	* blitz/array/where.h: minmax::max(minmax::max(stride1,stride2),stride3)
	replaced by
	stride1>(stride2=(stride2>stride3?stride2:stride3))?stride1:stride2
	* blitz/transversal.cc, blitz/transversal.h: template declaration
	template<int N_dimensions>
	_bz_typename TraversalOrderCollection<N_dimensions>::T_set
	    TraversalOrderCollection<N_dimensions>::traversals_;
	in blitz/transversal.cc moved before template specialisation
	template<>
	class TraversalOrderCollection<0> {}
	in blitz/transversal.h 
	* blitz/array/fastiter.h: for BZ_HAVE_STD only
	#include <strstream> replaced by #include <sstream> 
	ostrstream ostr replaced by ostringstream ostr
	* testsuite/matthias-troyer-1.cpp, testsuite/matthias-troyer-2.cpp:
	Removed unnecessary includes for iostream.h and complex.h
	* examples/cfd.cpp: Added #ifdef BZ_HAVE_STD for #include <fstream>
	* examples/haney.cpp: Likewise for #include<valarray>
	* blitz/vecexpr.h: (re)inserted includes for vecbops, vecuops and vecbfn
	in order to compile testsuite/tinyvec.cpp
	* benchmarks/ct.cpp: Removed (output of g++ -E)
	* benchmarks/acou3db4.cpp: corrected typo in 
	#include <blitz/array/stencil.h>, should be 
	#include <blitz/array/stencils.h>
	* benchmarks/acou3d.cpp: Added #include <blitz/traversal.h> for call to
	generateFastTraversalOrder function
	* benchmarks/stencil.cpp: Likewise
	* blitz/memblock.h: In the constructor
	MemoryBlock(size_t length, T_type* _bz_restrict data)
	dataBlockAddress_ = data replaced by dataBlockAddress_ = 0
	as it was before. (testsuite/extract does not crash then)
	* testsuite/matthias-troyer-2.cpp: changed the statement
	A = exp(c * (sqr(i-midpoint) + sqr(j-midpoint) + sqr(k-midpoint)));
	by
	A = zip( exp(c * (sqr(i-midpoint) + sqr(j-midpoint) + sqr(k-midpoint))),
	0.0, complex<double>());
	Still a problem with the complex stencil, right now the statement
	applyStencil(kinEnergy(),A,B); is commented

2002-02-28 tveldhui
	* blitz/memblock.h: Fixed extra semicolon problem with KCC.

2001-02-22 tveldhui
	* manual/blitz02.html: Fixed minor bug in docs.

2001-02-15 tveldhui
	* blitz/array-impl.h: Fixed typo.
	* blitz/blitz.h: Fixed problem with BZ_THREADSAFE macros.

2001-02-11 tveldhui
	* blitz/array-impl.h: Fixed prototype typos
	* blitz/blitz.h: Fixed minor typo.

2001-02-11 Julian Cummings
    * blitz/array/domain.h, blitz/array/slicing.cc: Added StridedDomain class
		and more versions of resizeAndPreserve.

2001-02-04 tveldhui
	* blitz/blitz.h blitz/memblock.h: Made memory block reference counting
	(optionally) threadsafe when BZ_THREADSAFE is defined.  Currently uses
	pthread mutex.  When compiling with gcc -pthread, _REENTRANT automatically
	causes BZ_THREADSAFE to be enabled.

2001-01-26 tveldhui
    * blitz/array/eval.cc blitz/array/methods.cc blitz/Array.h
		examples/array.cpp blitz/benchext.cc blitz/range.h blitz/TinyVec.h
		blitz/tuning.h: More source code reorganization to reduce compile times.
    * blitz/array/stencils.cc: Incorporated 1D stencil fix from Derrick Bass.
    * blitz/array/funcs.h, blitz/arrayuops.cc: Changed isnan to blitz_isnan,
		to avoid conflicts with implementations that define isnan as a
		preprocessor macro.
		* random/mt.h: Incorporated changes from Max Domeika for STL
		compatibility.
		* examples/cast.cpp examples/deriv.cpp examples/erf.cpp examples/fixed.cpp
		examples/matmult.cpp examples/outer.cpp examples/pick.cpp
		examples/qcd.cpp examples/rangexpr.cpp examples/reduce.cpp
		examples/simple.cpp examples/slicing.cpp examples/storage.cpp
		examples/tiny.cpp examples/where.cpp: More source code reorganization
		to reduce compile times.
		* blitz/meta/metaprog.h: Updated docs to reflect isnan -> blitz_isnan
		change
		* blitz/meta/sum.h: Fixed bug found by Masahiro TATSUMI

2001-01-25 tveldhui
    * blitz/array/asexpr.h blitz/array/cartesian.h blitz/array/cgsolve.h
		blitz/array/convolve.h blitz/array/domain.h blitz/array/et.h 
		blitz/array/funcs.h blitz/array/geometry.h blitz/array/indirect.h 
		blitz/array/multi.h blitz/array/newet-macros.h blitz/array/newet.h
    blitz/array/ops.h blitz/array/stencil-et.h blitz/array/stencilops.h
		blitz/array/stencils.h blitz/array/storage.h blitz/array/where.h 
		blitz/array/zip.h blitz/array/complex.cc blitz/array/convolve.cc 
		blitz/array/cycle.cc blitz/array/io.cc blitz/array/misc.cc 
		blitz/array/newbops.cc blitz/array/ops.cc blitz/array/reduce.cc 
		blitz/array/resize.cc blitz/array/slicing.cc blitz/array/stencils.cc
		blitz/tinyvec.cc blitz/etbase.h blitz/limits-hack.h blitz/mathf2.h
		blitz/minmax.h blitz/traversal.cc: Ensured that source files have cvs logs.
 
2001-01-24 tveldhui
    * Updated copyright date in headers.
		* blitz/array/methods.cc examples/array.cpp examples/cast.cpp 
		examples/deriv.cpp examples/fixed.cpp examples/simple.cpp: Widespread
		changes to reduce compile time. For backwards compatibility, 
		#include <blitz/array.h> enables BZ_GANG_INCLUDE mode which includes
		all array and vector functionality (about 120000 lines of code).  
		#include <blitz/Array.h> includes a minimal subset of Array functionality;
		other features must be included explicitly.
    * blitz/array/eval.cc blitz/Array.h blitz/blitz.h blitz/TinyVec.h
		blitz/vecexpr.h blitz/vector.h: Reorganized #include orders to avoid
		including the huge Vector e.t. implementation when using Array.

2000-06-19 tveldhui
	* manual/examples/storage.cpp: Initial source check-in; added files not
	usually released in the distribution.
	* manual/blitz02.html: Likewise
	* blitz/generate/genarrbops.cpp blitz/generate/genvecbops.cpp: Initial 
	source check-in; added files not usually released in thedistribution.
	* blitz/vecuops.cc: Initial source check-in; added files not usually
	released in the distribution.

1999-01-25 allan@stokes.ca (Allan Stokes) www.stokes.ca
	* random/mt.h: adapted to STL-like idiom 

1998-12-06 tveldhui
	* blitz/memblock.h: Prior to adding UnownedMemoryBlock.

1998-06-15 tveldhui
	* blitz/memblock.h: When a memory block is created from an existing block
	of data, add an additional reference count so that makeUnique() will
	create a copy of the data.

1998-04-03 tveldhui
	* compiler/bzconfig: Added command-line options, noninteractive mode

1998-03-14 tveldhui
    * 0.2-alpha-05

1998-02-25 tveldhui
    * blitz/array/eval.cc: Initial revision.

1997-08-18 tveldhui
    * Just prior to implementing fastRead() optimization for array
		expression evaluation.

1997-08-15 tveldhui
    * Just prior to loop-collapse change

1997-07-16 tveldhui
    * Alpha release 0.2 (Arrays)

1997-07-03 tveldhui
	* examples/numinquire.cpp: Initial revision

1997-02-28 tveldhui
	* examples/qcd.cpp blitz/rand-tt800.h: Initial revision

1997-01-24 tveldhui
	* blitz/bench.h: Prior to rewrite of Bench class; in this version, Bench
	contain each benchmark implementation.

1997-01-23 tveldhui
	* blitz/vecwhere.h: Initial revision

1997-01-13 tveldhui
	* blitz/numtrait.h blitz/vecglobs.h blitz/vecpick.h blitz/vecpickiter.h
	blitz/zero.h: Initial revision.

1996-11-11 tveldhui
	* blitz/memblock.h blitz/range.h blitz/tuning.h: Initial revision.

1996-11-01 tveldhui
	* compiler/bzconfig: Added type promotion check; tidied up.

1996-10-31 tveldhui
	* blitz/matrix.h blitz/vector.h: Did away with multiple template parameters.
	Only numeric type and structure parameters now.

1996-04-16 todd
	* compiler/bzconfig: Initial revision. All important features checked.

